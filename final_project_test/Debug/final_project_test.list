
final_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d74  08003d74  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08003d74  08003d74  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d74  08003d74  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08003d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  200000bc  08003e38  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08003e38  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5e3  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bb  00000000  00000000  0002b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0002d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a2  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e391  00000000  00000000  0004770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089048  00000000  00000000  00055a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000deae3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003850  00000000  00000000  000deb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c84 	.word	0x08003c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08003c84 	.word	0x08003c84

0800014c <fsm>:
#include "software_timer.h"
#include "stdio.h"
#include "main.h"
#include "stdint.h"
char str[50];
void fsm(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(state){
 8000150:	4b97      	ldr	r3, [pc, #604]	; (80003b0 <fsm+0x264>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b07      	cmp	r3, #7
 8000156:	f200 826a 	bhi.w	800062e <fsm+0x4e2>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000181 	.word	0x08000181
 8000164:	080001c7 	.word	0x080001c7
 8000168:	08000295 	.word	0x08000295
 800016c:	0800034f 	.word	0x0800034f
 8000170:	0800043b 	.word	0x0800043b
 8000174:	080004bd 	.word	0x080004bd
 8000178:	0800053f 	.word	0x0800053f
 800017c:	080005b9 	.word	0x080005b9
	case INIT:
		red_duration=5;
 8000180:	4b8c      	ldr	r3, [pc, #560]	; (80003b4 <fsm+0x268>)
 8000182:	2205      	movs	r2, #5
 8000184:	601a      	str	r2, [r3, #0]
		green_duration=3;
 8000186:	4b8c      	ldr	r3, [pc, #560]	; (80003b8 <fsm+0x26c>)
 8000188:	2203      	movs	r2, #3
 800018a:	601a      	str	r2, [r3, #0]
		yellow_duration=2;
 800018c:	4b8b      	ldr	r3, [pc, #556]	; (80003bc <fsm+0x270>)
 800018e:	2202      	movs	r2, #2
 8000190:	601a      	str	r2, [r3, #0]
		counter1=red_duration;
 8000192:	4b88      	ldr	r3, [pc, #544]	; (80003b4 <fsm+0x268>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a8a      	ldr	r2, [pc, #552]	; (80003c0 <fsm+0x274>)
 8000198:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"red=%d\r\n"
 800019a:	4b89      	ldr	r3, [pc, #548]	; (80003c0 <fsm+0x274>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	461a      	mov	r2, r3
 80001a0:	4988      	ldr	r1, [pc, #544]	; (80003c4 <fsm+0x278>)
 80001a2:	4889      	ldr	r0, [pc, #548]	; (80003c8 <fsm+0x27c>)
 80001a4:	f003 f8f4 	bl	8003390 <siprintf>
 80001a8:	4603      	mov	r3, r0
 80001aa:	b29a      	uxth	r2, r3
 80001ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b0:	4985      	ldr	r1, [pc, #532]	; (80003c8 <fsm+0x27c>)
 80001b2:	4886      	ldr	r0, [pc, #536]	; (80003cc <fsm+0x280>)
 80001b4:	f002 fc2f 	bl	8002a16 <HAL_UART_Transmit>
							  		,counter1),1000) ;
		setTimer1(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f000 fe76 	bl	8000eac <setTimer1>
		state=AUTO_RED;
 80001c0:	4b7b      	ldr	r3, [pc, #492]	; (80003b0 <fsm+0x264>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	601a      	str	r2, [r3, #0]
	case AUTO_RED:
		//reset flag for setting button and manual button
		is_button_pressed(SETTING_IDX);
 80001c6:	2001      	movs	r0, #1
 80001c8:	f000 fbbc 	bl	8000944 <is_button_pressed>
		is_button_pressed(MANUAL_IDX);
 80001cc:	2002      	movs	r0, #2
 80001ce:	f000 fbb9 	bl	8000944 <is_button_pressed>
		//hien thi mau do tren den giao thong 1
		set_color_light1(DO);
 80001d2:	2001      	movs	r0, #1
 80001d4:	f000 fad4 	bl	8000780 <set_color_light1>
		//hien thi den giao thong 2
		if (counter1>=yellow_duration) set_color_light2(XANH);
 80001d8:	4b79      	ldr	r3, [pc, #484]	; (80003c0 <fsm+0x274>)
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b77      	ldr	r3, [pc, #476]	; (80003bc <fsm+0x270>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	db03      	blt.n	80001ec <fsm+0xa0>
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 fb17 	bl	8000818 <set_color_light2>
 80001ea:	e002      	b.n	80001f2 <fsm+0xa6>
		else set_color_light2(VANG);
 80001ec:	2002      	movs	r0, #2
 80001ee:	f000 fb13 	bl	8000818 <set_color_light2>
		//dem lui moi 1s
		if(timer1_flag==1){
 80001f2:	4b77      	ldr	r3, [pc, #476]	; (80003d0 <fsm+0x284>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d132      	bne.n	8000260 <fsm+0x114>
			counter1--;
 80001fa:	4b71      	ldr	r3, [pc, #452]	; (80003c0 <fsm+0x274>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	3b01      	subs	r3, #1
 8000200:	4a6f      	ldr	r2, [pc, #444]	; (80003c0 <fsm+0x274>)
 8000202:	6013      	str	r3, [r2, #0]
			if (counter1<=0) {
 8000204:	4b6e      	ldr	r3, [pc, #440]	; (80003c0 <fsm+0x274>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	dc16      	bgt.n	800023a <fsm+0xee>
				counter1=green_duration;//nap lai thoi gian cho duration
 800020c:	4b6a      	ldr	r3, [pc, #424]	; (80003b8 <fsm+0x26c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a6b      	ldr	r2, [pc, #428]	; (80003c0 <fsm+0x274>)
 8000212:	6013      	str	r3, [r2, #0]
				state=AUTO_GREEN;
 8000214:	4b66      	ldr	r3, [pc, #408]	; (80003b0 <fsm+0x264>)
 8000216:	2202      	movs	r2, #2
 8000218:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"green=%d\r\n"
 800021a:	4b69      	ldr	r3, [pc, #420]	; (80003c0 <fsm+0x274>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	461a      	mov	r2, r3
 8000220:	496c      	ldr	r1, [pc, #432]	; (80003d4 <fsm+0x288>)
 8000222:	4869      	ldr	r0, [pc, #420]	; (80003c8 <fsm+0x27c>)
 8000224:	f003 f8b4 	bl	8003390 <siprintf>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	4965      	ldr	r1, [pc, #404]	; (80003c8 <fsm+0x27c>)
 8000232:	4866      	ldr	r0, [pc, #408]	; (80003cc <fsm+0x280>)
 8000234:	f002 fbef 	bl	8002a16 <HAL_UART_Transmit>
 8000238:	e00e      	b.n	8000258 <fsm+0x10c>
												  		,counter1),1000) ;
			}//nguoc lai van o trang thai auto_red
			else
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"red=%d\r\n"
 800023a:	4b61      	ldr	r3, [pc, #388]	; (80003c0 <fsm+0x274>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	4960      	ldr	r1, [pc, #384]	; (80003c4 <fsm+0x278>)
 8000242:	4861      	ldr	r0, [pc, #388]	; (80003c8 <fsm+0x27c>)
 8000244:	f003 f8a4 	bl	8003390 <siprintf>
 8000248:	4603      	mov	r3, r0
 800024a:	b29a      	uxth	r2, r3
 800024c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000250:	495d      	ldr	r1, [pc, #372]	; (80003c8 <fsm+0x27c>)
 8000252:	485e      	ldr	r0, [pc, #376]	; (80003cc <fsm+0x280>)
 8000254:	f002 fbdf 	bl	8002a16 <HAL_UART_Transmit>
								  		,counter1),1000) ;
			setTimer1(1000);
 8000258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025c:	f000 fe26 	bl	8000eac <setTimer1>
		}

		//neu an nut 1 thi chuyen sang trang thai setting
		if (is_button_pressed(STATE_IDX))
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fb6f 	bl	8000944 <is_button_pressed>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	f000 81e2 	beq.w	8000632 <fsm+0x4e6>
			{
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_red=%d\r\n"
 800026e:	4b51      	ldr	r3, [pc, #324]	; (80003b4 <fsm+0x268>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	461a      	mov	r2, r3
 8000274:	4958      	ldr	r1, [pc, #352]	; (80003d8 <fsm+0x28c>)
 8000276:	4854      	ldr	r0, [pc, #336]	; (80003c8 <fsm+0x27c>)
 8000278:	f003 f88a 	bl	8003390 <siprintf>
 800027c:	4603      	mov	r3, r0
 800027e:	b29a      	uxth	r2, r3
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	4950      	ldr	r1, [pc, #320]	; (80003c8 <fsm+0x27c>)
 8000286:	4851      	ldr	r0, [pc, #324]	; (80003cc <fsm+0x280>)
 8000288:	f002 fbc5 	bl	8002a16 <HAL_UART_Transmit>
										,red_duration),1000);
			state=SETTING_RED;
 800028c:	4b48      	ldr	r3, [pc, #288]	; (80003b0 <fsm+0x264>)
 800028e:	2204      	movs	r2, #4
 8000290:	601a      	str	r2, [r3, #0]
			}
		break;
 8000292:	e1ce      	b.n	8000632 <fsm+0x4e6>
	case AUTO_GREEN:
		//reset flag for setting button and manual button
		is_button_pressed(SETTING_IDX);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fb55 	bl	8000944 <is_button_pressed>
		is_button_pressed(MANUAL_IDX);
 800029a:	2002      	movs	r0, #2
 800029c:	f000 fb52 	bl	8000944 <is_button_pressed>
		//hien thi mau xanh tren den giao thong 1
		set_color_light1(XANH);
 80002a0:	2003      	movs	r0, #3
 80002a2:	f000 fa6d 	bl	8000780 <set_color_light1>
		//hien thi den giao thong 2
		set_color_light2(DO);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 fab6 	bl	8000818 <set_color_light2>
		//gui tin hieu uart de hien thi thoi gian
			//can bo sung them ham trong hardware_layer
		//dem lui moi 1s
		if(timer1_flag==1){
 80002ac:	4b48      	ldr	r3, [pc, #288]	; (80003d0 <fsm+0x284>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d132      	bne.n	800031a <fsm+0x1ce>
			counter1--;
 80002b4:	4b42      	ldr	r3, [pc, #264]	; (80003c0 <fsm+0x274>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	4a41      	ldr	r2, [pc, #260]	; (80003c0 <fsm+0x274>)
 80002bc:	6013      	str	r3, [r2, #0]
			if (counter1<=0) {
 80002be:	4b40      	ldr	r3, [pc, #256]	; (80003c0 <fsm+0x274>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	dc16      	bgt.n	80002f4 <fsm+0x1a8>
				counter1=yellow_duration;//nap lai thoi gian cho duration
 80002c6:	4b3d      	ldr	r3, [pc, #244]	; (80003bc <fsm+0x270>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a3d      	ldr	r2, [pc, #244]	; (80003c0 <fsm+0x274>)
 80002cc:	6013      	str	r3, [r2, #0]
				state=AUTO_YELLOW;
 80002ce:	4b38      	ldr	r3, [pc, #224]	; (80003b0 <fsm+0x264>)
 80002d0:	2203      	movs	r2, #3
 80002d2:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"yellow=%d\r\n"
 80002d4:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <fsm+0x274>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	461a      	mov	r2, r3
 80002da:	4940      	ldr	r1, [pc, #256]	; (80003dc <fsm+0x290>)
 80002dc:	483a      	ldr	r0, [pc, #232]	; (80003c8 <fsm+0x27c>)
 80002de:	f003 f857 	bl	8003390 <siprintf>
 80002e2:	4603      	mov	r3, r0
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ea:	4937      	ldr	r1, [pc, #220]	; (80003c8 <fsm+0x27c>)
 80002ec:	4837      	ldr	r0, [pc, #220]	; (80003cc <fsm+0x280>)
 80002ee:	f002 fb92 	bl	8002a16 <HAL_UART_Transmit>
 80002f2:	e00e      	b.n	8000312 <fsm+0x1c6>
												  		,counter1),1000) ;
			}//nguoc lai van o trang thai auto_green
			else
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"green=%d\r\n"
 80002f4:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <fsm+0x274>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	4936      	ldr	r1, [pc, #216]	; (80003d4 <fsm+0x288>)
 80002fc:	4832      	ldr	r0, [pc, #200]	; (80003c8 <fsm+0x27c>)
 80002fe:	f003 f847 	bl	8003390 <siprintf>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030a:	492f      	ldr	r1, [pc, #188]	; (80003c8 <fsm+0x27c>)
 800030c:	482f      	ldr	r0, [pc, #188]	; (80003cc <fsm+0x280>)
 800030e:	f002 fb82 	bl	8002a16 <HAL_UART_Transmit>
											  		,counter1),1000) ;
			setTimer1(1000);
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f000 fdc9 	bl	8000eac <setTimer1>
		}
		//neu counter1 == 0 chuyen trang thai sang auto_yellow


		//neu an nut 1 thi chuyen sang trang thai setting_red
		if (is_button_pressed(STATE_IDX))
 800031a:	2000      	movs	r0, #0
 800031c:	f000 fb12 	bl	8000944 <is_button_pressed>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	f000 8187 	beq.w	8000636 <fsm+0x4ea>
		{
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_red=%d\r\n"
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <fsm+0x268>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	492a      	ldr	r1, [pc, #168]	; (80003d8 <fsm+0x28c>)
 8000330:	4825      	ldr	r0, [pc, #148]	; (80003c8 <fsm+0x27c>)
 8000332:	f003 f82d 	bl	8003390 <siprintf>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	4922      	ldr	r1, [pc, #136]	; (80003c8 <fsm+0x27c>)
 8000340:	4822      	ldr	r0, [pc, #136]	; (80003cc <fsm+0x280>)
 8000342:	f002 fb68 	bl	8002a16 <HAL_UART_Transmit>
										,red_duration),1000);
			state=SETTING_RED;
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <fsm+0x264>)
 8000348:	2204      	movs	r2, #4
 800034a:	601a      	str	r2, [r3, #0]
		}
		break;
 800034c:	e173      	b.n	8000636 <fsm+0x4ea>
	case AUTO_YELLOW:
		//reset flag for setting button and manual button
		is_button_pressed(SETTING_IDX);
 800034e:	2001      	movs	r0, #1
 8000350:	f000 faf8 	bl	8000944 <is_button_pressed>
		is_button_pressed(MANUAL_IDX);
 8000354:	2002      	movs	r0, #2
 8000356:	f000 faf5 	bl	8000944 <is_button_pressed>
		//hien thi mau xanh tren den giao thong 1
		set_color_light1(VANG);
 800035a:	2002      	movs	r0, #2
 800035c:	f000 fa10 	bl	8000780 <set_color_light1>
		//hien thi den giao thong 2
		set_color_light2(DO);
 8000360:	2001      	movs	r0, #1
 8000362:	f000 fa59 	bl	8000818 <set_color_light2>
		//gui tin hieu uart de hien thi thoi gian
			//can bo sung them ham trong hardware_layer
		//dem lui moi 1s
		if(timer1_flag==1){
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <fsm+0x284>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d14b      	bne.n	8000406 <fsm+0x2ba>
			counter1--;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <fsm+0x274>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <fsm+0x274>)
 8000376:	6013      	str	r3, [r2, #0]
			//neu counter1 == 0 chuyen trang thai sang auto_red
			if (counter1==0) {
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <fsm+0x274>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d12f      	bne.n	80003e0 <fsm+0x294>
				counter1=red_duration;//nap lai thoi gian cho duration
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <fsm+0x268>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <fsm+0x274>)
 8000386:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"red=%d\r\n"
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <fsm+0x274>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	490d      	ldr	r1, [pc, #52]	; (80003c4 <fsm+0x278>)
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <fsm+0x27c>)
 8000392:	f002 fffd 	bl	8003390 <siprintf>
 8000396:	4603      	mov	r3, r0
 8000398:	b29a      	uxth	r2, r3
 800039a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039e:	490a      	ldr	r1, [pc, #40]	; (80003c8 <fsm+0x27c>)
 80003a0:	480a      	ldr	r0, [pc, #40]	; (80003cc <fsm+0x280>)
 80003a2:	f002 fb38 	bl	8002a16 <HAL_UART_Transmit>
															  		,counter1),1000) ;
				state=AUTO_RED;
 80003a6:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <fsm+0x264>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	e027      	b.n	80003fe <fsm+0x2b2>
 80003ae:	bf00      	nop
 80003b0:	2000011c 	.word	0x2000011c
 80003b4:	20000110 	.word	0x20000110
 80003b8:	20000114 	.word	0x20000114
 80003bc:	20000118 	.word	0x20000118
 80003c0:	2000010c 	.word	0x2000010c
 80003c4:	08003c9c 	.word	0x08003c9c
 80003c8:	200000d8 	.word	0x200000d8
 80003cc:	20000178 	.word	0x20000178
 80003d0:	200004e0 	.word	0x200004e0
 80003d4:	08003ca8 	.word	0x08003ca8
 80003d8:	08003cb4 	.word	0x08003cb4
 80003dc:	08003cc8 	.word	0x08003cc8
			}//nguoc lai van o trang thai auto_yellow
			else HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"yellow=%d\r\n"
 80003e0:	4b9a      	ldr	r3, [pc, #616]	; (800064c <fsm+0x500>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	499a      	ldr	r1, [pc, #616]	; (8000650 <fsm+0x504>)
 80003e8:	489a      	ldr	r0, [pc, #616]	; (8000654 <fsm+0x508>)
 80003ea:	f002 ffd1 	bl	8003390 <siprintf>
 80003ee:	4603      	mov	r3, r0
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f6:	4997      	ldr	r1, [pc, #604]	; (8000654 <fsm+0x508>)
 80003f8:	4897      	ldr	r0, [pc, #604]	; (8000658 <fsm+0x50c>)
 80003fa:	f002 fb0c 	bl	8002a16 <HAL_UART_Transmit>
														  		,counter1),1000) ;
			setTimer1(1000);
 80003fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000402:	f000 fd53 	bl	8000eac <setTimer1>
		}


		//neu an nut 1 thi chuyen sang trang thai setting_red
		if (is_button_pressed(STATE_IDX))
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fa9c 	bl	8000944 <is_button_pressed>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	f000 8113 	beq.w	800063a <fsm+0x4ee>
		{
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_red=%d\r\n"
 8000414:	4b91      	ldr	r3, [pc, #580]	; (800065c <fsm+0x510>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4991      	ldr	r1, [pc, #580]	; (8000660 <fsm+0x514>)
 800041c:	488d      	ldr	r0, [pc, #564]	; (8000654 <fsm+0x508>)
 800041e:	f002 ffb7 	bl	8003390 <siprintf>
 8000422:	4603      	mov	r3, r0
 8000424:	b29a      	uxth	r2, r3
 8000426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042a:	498a      	ldr	r1, [pc, #552]	; (8000654 <fsm+0x508>)
 800042c:	488a      	ldr	r0, [pc, #552]	; (8000658 <fsm+0x50c>)
 800042e:	f002 faf2 	bl	8002a16 <HAL_UART_Transmit>
							,red_duration),1000) ;
			state=SETTING_RED;
 8000432:	4b8c      	ldr	r3, [pc, #560]	; (8000664 <fsm+0x518>)
 8000434:	2204      	movs	r2, #4
 8000436:	601a      	str	r2, [r3, #0]

		}
		break;
 8000438:	e0ff      	b.n	800063a <fsm+0x4ee>
	case SETTING_RED:
		//reset flag for manual button
		is_button_pressed(MANUAL_IDX);
 800043a:	2002      	movs	r0, #2
 800043c:	f000 fa82 	bl	8000944 <is_button_pressed>
		//hien thi mau do tren den giao thong 1
		set_color_light1(DO);
 8000440:	2001      	movs	r0, #1
 8000442:	f000 f99d 	bl	8000780 <set_color_light1>
		//neu an nut 2 thi se tang red_duration
		if(is_button_pressed(SETTING_IDX)){
 8000446:	2001      	movs	r0, #1
 8000448:	f000 fa7c 	bl	8000944 <is_button_pressed>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d01a      	beq.n	8000488 <fsm+0x33c>
			red_duration++;
 8000452:	4b82      	ldr	r3, [pc, #520]	; (800065c <fsm+0x510>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	4a80      	ldr	r2, [pc, #512]	; (800065c <fsm+0x510>)
 800045a:	6013      	str	r3, [r2, #0]
			if(red_duration>=10) red_duration=1;
 800045c:	4b7f      	ldr	r3, [pc, #508]	; (800065c <fsm+0x510>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b09      	cmp	r3, #9
 8000462:	dd02      	ble.n	800046a <fsm+0x31e>
 8000464:	4b7d      	ldr	r3, [pc, #500]	; (800065c <fsm+0x510>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_red=%d\r\n"
 800046a:	4b7c      	ldr	r3, [pc, #496]	; (800065c <fsm+0x510>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	461a      	mov	r2, r3
 8000470:	497b      	ldr	r1, [pc, #492]	; (8000660 <fsm+0x514>)
 8000472:	4878      	ldr	r0, [pc, #480]	; (8000654 <fsm+0x508>)
 8000474:	f002 ff8c 	bl	8003390 <siprintf>
 8000478:	4603      	mov	r3, r0
 800047a:	b29a      	uxth	r2, r3
 800047c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000480:	4974      	ldr	r1, [pc, #464]	; (8000654 <fsm+0x508>)
 8000482:	4875      	ldr	r0, [pc, #468]	; (8000658 <fsm+0x50c>)
 8000484:	f002 fac7 	bl	8002a16 <HAL_UART_Transmit>
		}
		//gui tin hieu uart de hien thi thoi gian
					//can bo sung them ham trong hardware_layer

		//neu an nut 1 thi chuyen sang trang thai setting_green
		if (is_button_pressed(STATE_IDX)){
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fa5b 	bl	8000944 <is_button_pressed>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	f000 80d4 	beq.w	800063e <fsm+0x4f2>
			state=SETTING_GREEN;
 8000496:	4b73      	ldr	r3, [pc, #460]	; (8000664 <fsm+0x518>)
 8000498:	2205      	movs	r2, #5
 800049a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_green=%d\r\n"
 800049c:	4b72      	ldr	r3, [pc, #456]	; (8000668 <fsm+0x51c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	461a      	mov	r2, r3
 80004a2:	4972      	ldr	r1, [pc, #456]	; (800066c <fsm+0x520>)
 80004a4:	486b      	ldr	r0, [pc, #428]	; (8000654 <fsm+0x508>)
 80004a6:	f002 ff73 	bl	8003390 <siprintf>
 80004aa:	4603      	mov	r3, r0
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b2:	4968      	ldr	r1, [pc, #416]	; (8000654 <fsm+0x508>)
 80004b4:	4868      	ldr	r0, [pc, #416]	; (8000658 <fsm+0x50c>)
 80004b6:	f002 faae 	bl	8002a16 <HAL_UART_Transmit>
										,green_duration),1000) ;
			}
		break;
 80004ba:	e0c0      	b.n	800063e <fsm+0x4f2>
	case SETTING_GREEN:
		//reset flag for manual button
		is_button_pressed(MANUAL_IDX);
 80004bc:	2002      	movs	r0, #2
 80004be:	f000 fa41 	bl	8000944 <is_button_pressed>
		//hien thi mau xanh tren den giao thong 1
		set_color_light1(XANH);
 80004c2:	2003      	movs	r0, #3
 80004c4:	f000 f95c 	bl	8000780 <set_color_light1>
		//neu an nut 2 thi se tang red_duration
		if(is_button_pressed(SETTING_IDX)){
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fa3b 	bl	8000944 <is_button_pressed>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d01a      	beq.n	800050a <fsm+0x3be>
			green_duration++;
 80004d4:	4b64      	ldr	r3, [pc, #400]	; (8000668 <fsm+0x51c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a63      	ldr	r2, [pc, #396]	; (8000668 <fsm+0x51c>)
 80004dc:	6013      	str	r3, [r2, #0]
			if(green_duration>=10) green_duration=1;
 80004de:	4b62      	ldr	r3, [pc, #392]	; (8000668 <fsm+0x51c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b09      	cmp	r3, #9
 80004e4:	dd02      	ble.n	80004ec <fsm+0x3a0>
 80004e6:	4b60      	ldr	r3, [pc, #384]	; (8000668 <fsm+0x51c>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_green=%d\r\n"
 80004ec:	4b5e      	ldr	r3, [pc, #376]	; (8000668 <fsm+0x51c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	495e      	ldr	r1, [pc, #376]	; (800066c <fsm+0x520>)
 80004f4:	4857      	ldr	r0, [pc, #348]	; (8000654 <fsm+0x508>)
 80004f6:	f002 ff4b 	bl	8003390 <siprintf>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000502:	4954      	ldr	r1, [pc, #336]	; (8000654 <fsm+0x508>)
 8000504:	4854      	ldr	r0, [pc, #336]	; (8000658 <fsm+0x50c>)
 8000506:	f002 fa86 	bl	8002a16 <HAL_UART_Transmit>
		}
		//gui tin hieu uart de hien thi thoi gian
					//can bo sung them ham trong hardware_layer

		//neu an nut 1 thi chuyen sang trang thai setting_yellow
		if (is_button_pressed(STATE_IDX)){
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fa1a 	bl	8000944 <is_button_pressed>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	f000 8095 	beq.w	8000642 <fsm+0x4f6>
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_yellow=%d\r\n"
 8000518:	4b55      	ldr	r3, [pc, #340]	; (8000670 <fsm+0x524>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4955      	ldr	r1, [pc, #340]	; (8000674 <fsm+0x528>)
 8000520:	484c      	ldr	r0, [pc, #304]	; (8000654 <fsm+0x508>)
 8000522:	f002 ff35 	bl	8003390 <siprintf>
 8000526:	4603      	mov	r3, r0
 8000528:	b29a      	uxth	r2, r3
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	4949      	ldr	r1, [pc, #292]	; (8000654 <fsm+0x508>)
 8000530:	4849      	ldr	r0, [pc, #292]	; (8000658 <fsm+0x50c>)
 8000532:	f002 fa70 	bl	8002a16 <HAL_UART_Transmit>
										,yellow_duration),1000) ;
			state=SETTING_YELLOW;
 8000536:	4b4b      	ldr	r3, [pc, #300]	; (8000664 <fsm+0x518>)
 8000538:	2206      	movs	r2, #6
 800053a:	601a      	str	r2, [r3, #0]
			}
		break;
 800053c:	e081      	b.n	8000642 <fsm+0x4f6>
	case SETTING_YELLOW:
		//reset flag for manual button
		is_button_pressed(MANUAL_IDX);
 800053e:	2002      	movs	r0, #2
 8000540:	f000 fa00 	bl	8000944 <is_button_pressed>
		//hien thi mau vang tren den giao thong 1
		set_color_light1(VANG);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 f91b 	bl	8000780 <set_color_light1>
		//neu an nut 2 thi se tang red_duration
		if(is_button_pressed(SETTING_IDX)){
 800054a:	2001      	movs	r0, #1
 800054c:	f000 f9fa 	bl	8000944 <is_button_pressed>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d01a      	beq.n	800058c <fsm+0x440>
			yellow_duration++;
 8000556:	4b46      	ldr	r3, [pc, #280]	; (8000670 <fsm+0x524>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	4a44      	ldr	r2, [pc, #272]	; (8000670 <fsm+0x524>)
 800055e:	6013      	str	r3, [r2, #0]
			if(yellow_duration>=10) yellow_duration=1;
 8000560:	4b43      	ldr	r3, [pc, #268]	; (8000670 <fsm+0x524>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b09      	cmp	r3, #9
 8000566:	dd02      	ble.n	800056e <fsm+0x422>
 8000568:	4b41      	ldr	r3, [pc, #260]	; (8000670 <fsm+0x524>)
 800056a:	2201      	movs	r2, #1
 800056c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"setting_yellow=%d\r\n"
 800056e:	4b40      	ldr	r3, [pc, #256]	; (8000670 <fsm+0x524>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	493f      	ldr	r1, [pc, #252]	; (8000674 <fsm+0x528>)
 8000576:	4837      	ldr	r0, [pc, #220]	; (8000654 <fsm+0x508>)
 8000578:	f002 ff0a 	bl	8003390 <siprintf>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	4933      	ldr	r1, [pc, #204]	; (8000654 <fsm+0x508>)
 8000586:	4834      	ldr	r0, [pc, #208]	; (8000658 <fsm+0x50c>)
 8000588:	f002 fa45 	bl	8002a16 <HAL_UART_Transmit>
		}
		//gui tin hieu uart de hien thi thoi gian
					//can bo sung them ham trong hardware_layer

		//neu an nut 1 thi chuyen sang trang thai manual
		if (is_button_pressed(STATE_IDX)){
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f9d9 	bl	8000944 <is_button_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d056      	beq.n	8000646 <fsm+0x4fa>
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"manual\r\n"
 8000598:	4937      	ldr	r1, [pc, #220]	; (8000678 <fsm+0x52c>)
 800059a:	482e      	ldr	r0, [pc, #184]	; (8000654 <fsm+0x508>)
 800059c:	f002 fef8 	bl	8003390 <siprintf>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	492a      	ldr	r1, [pc, #168]	; (8000654 <fsm+0x508>)
 80005aa:	482b      	ldr	r0, [pc, #172]	; (8000658 <fsm+0x50c>)
 80005ac:	f002 fa33 	bl	8002a16 <HAL_UART_Transmit>
										),1000) ;
			state=MANUAL;
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <fsm+0x518>)
 80005b2:	2207      	movs	r2, #7
 80005b4:	601a      	str	r2, [r3, #0]
			}
		break;
 80005b6:	e046      	b.n	8000646 <fsm+0x4fa>
	case MANUAL:
		//reset flag for setting reset button
		is_button_pressed(SETTING_IDX);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 f9c3 	bl	8000944 <is_button_pressed>
		set_color_light1(manual_state);
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <fsm+0x530>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f8dc 	bl	8000780 <set_color_light1>
		if (is_button_pressed(MANUAL_IDX)) manual_state++;
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f9bb 	bl	8000944 <is_button_pressed>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d004      	beq.n	80005de <fsm+0x492>
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <fsm+0x530>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a28      	ldr	r2, [pc, #160]	; (800067c <fsm+0x530>)
 80005dc:	6013      	str	r3, [r2, #0]
		if (manual_state>3) manual_state=1;
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <fsm+0x530>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	dd03      	ble.n	80005ee <fsm+0x4a2>
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <fsm+0x530>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	e01b      	b.n	8000626 <fsm+0x4da>
		else if (is_button_pressed(STATE_IDX)){
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f9a8 	bl	8000944 <is_button_pressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d015      	beq.n	8000626 <fsm+0x4da>
			HAL_UART_Transmit(&huart2 ,(void*)str,sprintf(str,"auto_red=%d\r\n",
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <fsm+0x510>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	491f      	ldr	r1, [pc, #124]	; (8000680 <fsm+0x534>)
 8000602:	4814      	ldr	r0, [pc, #80]	; (8000654 <fsm+0x508>)
 8000604:	f002 fec4 	bl	8003390 <siprintf>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	4910      	ldr	r1, [pc, #64]	; (8000654 <fsm+0x508>)
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <fsm+0x50c>)
 8000614:	f002 f9ff 	bl	8002a16 <HAL_UART_Transmit>
										red_duration),1000) ;
			counter1=red_duration;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <fsm+0x510>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <fsm+0x500>)
 800061e:	6013      	str	r3, [r2, #0]
			state=AUTO_RED;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <fsm+0x518>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
		}
		is_button_pressed(SETTING_IDX);
 8000626:	2001      	movs	r0, #1
 8000628:	f000 f98c 	bl	8000944 <is_button_pressed>

		break;
 800062c:	e00c      	b.n	8000648 <fsm+0x4fc>
	default:
		break;
 800062e:	bf00      	nop
 8000630:	e00a      	b.n	8000648 <fsm+0x4fc>
		break;
 8000632:	bf00      	nop
 8000634:	e008      	b.n	8000648 <fsm+0x4fc>
		break;
 8000636:	bf00      	nop
 8000638:	e006      	b.n	8000648 <fsm+0x4fc>
		break;
 800063a:	bf00      	nop
 800063c:	e004      	b.n	8000648 <fsm+0x4fc>
		break;
 800063e:	bf00      	nop
 8000640:	e002      	b.n	8000648 <fsm+0x4fc>
		break;
 8000642:	bf00      	nop
 8000644:	e000      	b.n	8000648 <fsm+0x4fc>
		break;
 8000646:	bf00      	nop
	}
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000010c 	.word	0x2000010c
 8000650:	08003cc8 	.word	0x08003cc8
 8000654:	200000d8 	.word	0x200000d8
 8000658:	20000178 	.word	0x20000178
 800065c:	20000110 	.word	0x20000110
 8000660:	08003cb4 	.word	0x08003cb4
 8000664:	2000011c 	.word	0x2000011c
 8000668:	20000114 	.word	0x20000114
 800066c:	08003cd4 	.word	0x08003cd4
 8000670:	20000118 	.word	0x20000118
 8000674:	08003ce8 	.word	0x08003ce8
 8000678:	08003cfc 	.word	0x08003cfc
 800067c:	20000000 	.word	0x20000000
 8000680:	08003d08 	.word	0x08003d08

08000684 <pedestrian_fsm>:

void pedestrian_fsm(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	switch (pedes_state){
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <pedestrian_fsm+0xec>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b0c      	cmp	r3, #12
 800068e:	d02f      	beq.n	80006f0 <pedestrian_fsm+0x6c>
 8000690:	2b0c      	cmp	r3, #12
 8000692:	dc63      	bgt.n	800075c <pedestrian_fsm+0xd8>
 8000694:	2b0a      	cmp	r3, #10
 8000696:	d002      	beq.n	800069e <pedestrian_fsm+0x1a>
 8000698:	2b0b      	cmp	r3, #11
 800069a:	d040      	beq.n	800071e <pedestrian_fsm+0x9a>
			||((state==MANUAL)&&(manual_state==1||manual_state==3))
		) pedes_state = GREEN;

		break;
	default:
		break;
 800069c:	e05e      	b.n	800075c <pedestrian_fsm+0xd8>
		set_color_pedestrian_light(0);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f900 	bl	80008a4 <set_color_pedestrian_light>
		if(is_button_pressed(PEDES_IDX)){
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f94d 	bl	8000944 <is_button_pressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d057      	beq.n	8000760 <pedestrian_fsm+0xdc>
				(state==AUTO_RED&&counter1>=3)||
 80006b0:	4b30      	ldr	r3, [pc, #192]	; (8000774 <pedestrian_fsm+0xf0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
			if(
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d103      	bne.n	80006c0 <pedestrian_fsm+0x3c>
				(state==AUTO_RED&&counter1>=3)||
 80006b8:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <pedestrian_fsm+0xf4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	dc0f      	bgt.n	80006e0 <pedestrian_fsm+0x5c>
			     state==SETTING_RED||
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <pedestrian_fsm+0xf0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
				(state==AUTO_RED&&counter1>=3)||
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d00b      	beq.n	80006e0 <pedestrian_fsm+0x5c>
			   ((state==MANUAL)&&(manual_state==1||manual_state==3))
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <pedestrian_fsm+0xf0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
			     state==SETTING_RED||
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d10b      	bne.n	80006e8 <pedestrian_fsm+0x64>
			   ((state==MANUAL)&&(manual_state==1||manual_state==3))
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <pedestrian_fsm+0xf8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d003      	beq.n	80006e0 <pedestrian_fsm+0x5c>
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <pedestrian_fsm+0xf8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d103      	bne.n	80006e8 <pedestrian_fsm+0x64>
			) pedes_state = GREEN;
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <pedestrian_fsm+0xec>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	601a      	str	r2, [r3, #0]
		break;
 80006e6:	e03b      	b.n	8000760 <pedestrian_fsm+0xdc>
			else pedes_state=RED;
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <pedestrian_fsm+0xec>)
 80006ea:	220b      	movs	r2, #11
 80006ec:	601a      	str	r2, [r3, #0]
		break;
 80006ee:	e037      	b.n	8000760 <pedestrian_fsm+0xdc>
		set_color_pedestrian_light(XANH);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f8d7 	bl	80008a4 <set_color_pedestrian_light>
			(state==AUTO_GREEN)||
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <pedestrian_fsm+0xf0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
		if(
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d00b      	beq.n	8000716 <pedestrian_fsm+0x92>
			(state==SETTING_GREEN)||
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <pedestrian_fsm+0xf0>)
 8000700:	681b      	ldr	r3, [r3, #0]
			(state==AUTO_GREEN)||
 8000702:	2b05      	cmp	r3, #5
 8000704:	d007      	beq.n	8000716 <pedestrian_fsm+0x92>
			(state==MANUAL&&manual_state==2)
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <pedestrian_fsm+0xf0>)
 8000708:	681b      	ldr	r3, [r3, #0]
			(state==SETTING_GREEN)||
 800070a:	2b07      	cmp	r3, #7
 800070c:	d12a      	bne.n	8000764 <pedestrian_fsm+0xe0>
			(state==MANUAL&&manual_state==2)
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <pedestrian_fsm+0xf8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d126      	bne.n	8000764 <pedestrian_fsm+0xe0>
		) pedes_state=NONE;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <pedestrian_fsm+0xec>)
 8000718:	220a      	movs	r2, #10
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e022      	b.n	8000764 <pedestrian_fsm+0xe0>
		set_color_pedestrian_light(DO);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f8c0 	bl	80008a4 <set_color_pedestrian_light>
			(state==AUTO_RED&&counter1>=3)
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <pedestrian_fsm+0xf0>)
 8000726:	681b      	ldr	r3, [r3, #0]
		if(
 8000728:	2b01      	cmp	r3, #1
 800072a:	d103      	bne.n	8000734 <pedestrian_fsm+0xb0>
			(state==AUTO_RED&&counter1>=3)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <pedestrian_fsm+0xf4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b02      	cmp	r3, #2
 8000732:	dc0f      	bgt.n	8000754 <pedestrian_fsm+0xd0>
			||state==SETTING_RED
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <pedestrian_fsm+0xf0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d00b      	beq.n	8000754 <pedestrian_fsm+0xd0>
			||((state==MANUAL)&&(manual_state==1||manual_state==3))
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <pedestrian_fsm+0xf0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b07      	cmp	r3, #7
 8000742:	d111      	bne.n	8000768 <pedestrian_fsm+0xe4>
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <pedestrian_fsm+0xf8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d003      	beq.n	8000754 <pedestrian_fsm+0xd0>
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <pedestrian_fsm+0xf8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d109      	bne.n	8000768 <pedestrian_fsm+0xe4>
		) pedes_state = GREEN;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <pedestrian_fsm+0xec>)
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
		break;
 800075a:	e005      	b.n	8000768 <pedestrian_fsm+0xe4>
		break;
 800075c:	bf00      	nop
 800075e:	e004      	b.n	800076a <pedestrian_fsm+0xe6>
		break;
 8000760:	bf00      	nop
 8000762:	e002      	b.n	800076a <pedestrian_fsm+0xe6>
		break;
 8000764:	bf00      	nop
 8000766:	e000      	b.n	800076a <pedestrian_fsm+0xe6>
		break;
 8000768:	bf00      	nop
	}
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000004 	.word	0x20000004
 8000774:	2000011c 	.word	0x2000011c
 8000778:	2000010c 	.word	0x2000010c
 800077c:	20000000 	.word	0x20000000

08000780 <set_color_light1>:
 */

#include "hardware_layer.h"
#include "main.h"
#include "stdio.h"
void set_color_light1(int color){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	switch (color){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d83a      	bhi.n	8000804 <set_color_light1+0x84>
 800078e:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <set_color_light1+0x14>)
 8000790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000794:	080007a5 	.word	0x080007a5
 8000798:	080007bd 	.word	0x080007bd
 800079c:	080007ed 	.word	0x080007ed
 80007a0:	080007d5 	.word	0x080007d5
	case 0://khong mau
		HAL_GPIO_WritePin(Light1_1_GPIO_Port, Light1_1_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <set_color_light1+0x90>)
 80007ac:	f001 f8cf 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Light1_2_GPIO_Port, Light1_2_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2108      	movs	r1, #8
 80007b4:	4817      	ldr	r0, [pc, #92]	; (8000814 <set_color_light1+0x94>)
 80007b6:	f001 f8ca 	bl	800194e <HAL_GPIO_WritePin>
		break;
 80007ba:	e024      	b.n	8000806 <set_color_light1+0x86>
	case DO://mau do
		HAL_GPIO_WritePin(Light1_1_GPIO_Port, Light1_1_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <set_color_light1+0x90>)
 80007c4:	f001 f8c3 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Light1_2_GPIO_Port, Light1_2_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2108      	movs	r1, #8
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <set_color_light1+0x94>)
 80007ce:	f001 f8be 	bl	800194e <HAL_GPIO_WritePin>
		break;
 80007d2:	e018      	b.n	8000806 <set_color_light1+0x86>
	case XANH://mau xanh
		HAL_GPIO_WritePin(Light1_1_GPIO_Port, Light1_1_Pin, SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <set_color_light1+0x90>)
 80007dc:	f001 f8b7 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Light1_2_GPIO_Port, Light1_2_Pin, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2108      	movs	r1, #8
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <set_color_light1+0x94>)
 80007e6:	f001 f8b2 	bl	800194e <HAL_GPIO_WritePin>
		break;
 80007ea:	e00c      	b.n	8000806 <set_color_light1+0x86>
	case VANG://mau vang
		HAL_GPIO_WritePin(Light1_1_GPIO_Port, Light1_1_Pin, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <set_color_light1+0x90>)
 80007f4:	f001 f8ab 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Light1_2_GPIO_Port, Light1_2_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2108      	movs	r1, #8
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <set_color_light1+0x94>)
 80007fe:	f001 f8a6 	bl	800194e <HAL_GPIO_WritePin>
		break;
 8000802:	e000      	b.n	8000806 <set_color_light1+0x86>
	default:
		break;
 8000804:	bf00      	nop
	}
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800
 8000814:	40010c00 	.word	0x40010c00

08000818 <set_color_light2>:

void set_color_light2(int color){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	switch (color){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d836      	bhi.n	8000894 <set_color_light2+0x7c>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <set_color_light2+0x14>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	0800083d 	.word	0x0800083d
 8000830:	08000853 	.word	0x08000853
 8000834:	0800087f 	.word	0x0800087f
 8000838:	08000869 	.word	0x08000869
		case 0://khong mau
			HAL_GPIO_WritePin(Light2_1_GPIO_Port, Light2_1_Pin, SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2120      	movs	r1, #32
 8000840:	4817      	ldr	r0, [pc, #92]	; (80008a0 <set_color_light2+0x88>)
 8000842:	f001 f884 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Light2_2_GPIO_Port, Light2_2_Pin, SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2110      	movs	r1, #16
 800084a:	4815      	ldr	r0, [pc, #84]	; (80008a0 <set_color_light2+0x88>)
 800084c:	f001 f87f 	bl	800194e <HAL_GPIO_WritePin>
			break;
 8000850:	e021      	b.n	8000896 <set_color_light2+0x7e>
		case DO://mau do
			HAL_GPIO_WritePin(Light2_1_GPIO_Port, Light2_1_Pin, RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2120      	movs	r1, #32
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <set_color_light2+0x88>)
 8000858:	f001 f879 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Light2_2_GPIO_Port, Light2_2_Pin, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2110      	movs	r1, #16
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <set_color_light2+0x88>)
 8000862:	f001 f874 	bl	800194e <HAL_GPIO_WritePin>
			break;
 8000866:	e016      	b.n	8000896 <set_color_light2+0x7e>
		case XANH://mau xanh
			HAL_GPIO_WritePin(Light2_1_GPIO_Port, Light2_1_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2120      	movs	r1, #32
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <set_color_light2+0x88>)
 800086e:	f001 f86e 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Light2_2_GPIO_Port, Light2_2_Pin, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <set_color_light2+0x88>)
 8000878:	f001 f869 	bl	800194e <HAL_GPIO_WritePin>
			break;
 800087c:	e00b      	b.n	8000896 <set_color_light2+0x7e>
		case VANG://mau vang
			HAL_GPIO_WritePin(Light2_1_GPIO_Port, Light2_1_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <set_color_light2+0x88>)
 8000884:	f001 f863 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Light2_2_GPIO_Port, Light2_2_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2110      	movs	r1, #16
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <set_color_light2+0x88>)
 800088e:	f001 f85e 	bl	800194e <HAL_GPIO_WritePin>
			break;
 8000892:	e000      	b.n	8000896 <set_color_light2+0x7e>
		default:
			break;
 8000894:	bf00      	nop
		}
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40010c00 	.word	0x40010c00

080008a4 <set_color_pedestrian_light>:

void set_color_pedestrian_light(int color){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	switch (color){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d83e      	bhi.n	8000930 <set_color_pedestrian_light+0x8c>
 80008b2:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <set_color_pedestrian_light+0x14>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008e3 	.word	0x080008e3
 80008c0:	08000917 	.word	0x08000917
 80008c4:	080008fd 	.word	0x080008fd
		case 0://khong mau
			HAL_GPIO_WritePin(Pedes_light1_GPIO_Port, Pedes_light1_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ce:	481b      	ldr	r0, [pc, #108]	; (800093c <set_color_pedestrian_light+0x98>)
 80008d0:	f001 f83d 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pedes_light2_GPIO_Port, Pedes_light2_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4819      	ldr	r0, [pc, #100]	; (8000940 <set_color_pedestrian_light+0x9c>)
 80008dc:	f001 f837 	bl	800194e <HAL_GPIO_WritePin>
			break;
 80008e0:	e027      	b.n	8000932 <set_color_pedestrian_light+0x8e>
		case DO://mau do
			HAL_GPIO_WritePin(Pedes_light1_GPIO_Port, Pedes_light1_Pin, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <set_color_pedestrian_light+0x98>)
 80008ea:	f001 f830 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pedes_light2_GPIO_Port, Pedes_light2_Pin, SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	4812      	ldr	r0, [pc, #72]	; (8000940 <set_color_pedestrian_light+0x9c>)
 80008f6:	f001 f82a 	bl	800194e <HAL_GPIO_WritePin>
			break;
 80008fa:	e01a      	b.n	8000932 <set_color_pedestrian_light+0x8e>
		case XANH://mau xanh
			HAL_GPIO_WritePin(Pedes_light1_GPIO_Port, Pedes_light1_Pin, SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <set_color_pedestrian_light+0x98>)
 8000904:	f001 f823 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pedes_light2_GPIO_Port, Pedes_light2_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <set_color_pedestrian_light+0x9c>)
 8000910:	f001 f81d 	bl	800194e <HAL_GPIO_WritePin>
			break;
 8000914:	e00d      	b.n	8000932 <set_color_pedestrian_light+0x8e>
		case VANG://mau vang
			HAL_GPIO_WritePin(Pedes_light1_GPIO_Port, Pedes_light1_Pin, RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <set_color_pedestrian_light+0x98>)
 800091e:	f001 f816 	bl	800194e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pedes_light2_GPIO_Port, Pedes_light2_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <set_color_pedestrian_light+0x9c>)
 800092a:	f001 f810 	bl	800194e <HAL_GPIO_WritePin>
			break;
 800092e:	e000      	b.n	8000932 <set_color_pedestrian_light+0x8e>
		default:
			break;
 8000930:	bf00      	nop
		}
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010c00 	.word	0x40010c00
 8000940:	40010800 	.word	0x40010800

08000944 <is_button_pressed>:
int KeyReg2[NO_OF_BUTTONS] = {NORMAL_STATE};
int KeyReg3[NO_OF_BUTTONS] = {NORMAL_STATE};
int FlagFor3secPressed[NO_OF_BUTTONS] = {0};
int TimeForKeyPress = 300;

int is_button_pressed(int index){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	if(button_flag[index]==1){
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <is_button_pressed+0x30>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d106      	bne.n	8000966 <is_button_pressed+0x22>
		button_flag[index]=0;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <is_button_pressed+0x30>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2100      	movs	r1, #0
 800095e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <is_button_pressed+0x24>
	}
	return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000120 	.word	0x20000120

08000978 <read_pin>:
void read_pin(int i){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	switch (i){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d82e      	bhi.n	80009e4 <read_pin+0x6c>
 8000986:	a201      	add	r2, pc, #4	; (adr r2, 800098c <read_pin+0x14>)
 8000988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098c:	0800099d 	.word	0x0800099d
 8000990:	080009af 	.word	0x080009af
 8000994:	080009c1 	.word	0x080009c1
 8000998:	080009d3 	.word	0x080009d3
	case 0:
		KeyReg2[0]=HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 800099c:	2102      	movs	r1, #2
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <read_pin+0x78>)
 80009a0:	f000 ffbe 	bl	8001920 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <read_pin+0x7c>)
 80009aa:	601a      	str	r2, [r3, #0]
		break;
 80009ac:	e01b      	b.n	80009e6 <read_pin+0x6e>
	case 1:
		KeyReg2[1]=HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80009ae:	2102      	movs	r1, #2
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <read_pin+0x80>)
 80009b2:	f000 ffb5 	bl	8001920 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <read_pin+0x7c>)
 80009bc:	605a      	str	r2, [r3, #4]
		break;
 80009be:	e012      	b.n	80009e6 <read_pin+0x6e>
	case 2:
		KeyReg2[2]=HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80009c0:	2101      	movs	r1, #1
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <read_pin+0x80>)
 80009c4:	f000 ffac 	bl	8001920 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <read_pin+0x7c>)
 80009ce:	609a      	str	r2, [r3, #8]
		break;
 80009d0:	e009      	b.n	80009e6 <read_pin+0x6e>
	case 3:
		KeyReg2[3]=HAL_GPIO_ReadPin(Pedes_button_GPIO_Port, Pedes_button_Pin);
 80009d2:	2101      	movs	r1, #1
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <read_pin+0x78>)
 80009d6:	f000 ffa3 	bl	8001920 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <read_pin+0x7c>)
 80009e0:	60da      	str	r2, [r3, #12]
				break;
 80009e2:	e000      	b.n	80009e6 <read_pin+0x6e>
	default:
		break;
 80009e4:	bf00      	nop
	}
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010800 	.word	0x40010800
 80009f4:	20000028 	.word	0x20000028
 80009f8:	40010c00 	.word	0x40010c00

080009fc <input_reading>:

void input_reading(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
for(int i=0;i<4;i++){
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	e05d      	b.n	8000ac4 <input_reading+0xc8>
	KeyReg0[i]=KeyReg1[i];
 8000a08:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <input_reading+0xd8>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a10:	4931      	ldr	r1, [pc, #196]	; (8000ad8 <input_reading+0xdc>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[i]=KeyReg2[i];
 8000a18:	4a30      	ldr	r2, [pc, #192]	; (8000adc <input_reading+0xe0>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a20:	492c      	ldr	r1, [pc, #176]	; (8000ad4 <input_reading+0xd8>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//sua lai ham readpin
	read_pin(i);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ffa5 	bl	8000978 <read_pin>
	if((KeyReg0[i]==KeyReg1[i])&&(KeyReg1[i]==KeyReg2[i])){
 8000a2e:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <input_reading+0xdc>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a36:	4927      	ldr	r1, [pc, #156]	; (8000ad4 <input_reading+0xd8>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d13d      	bne.n	8000abe <input_reading+0xc2>
 8000a42:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <input_reading+0xd8>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4a:	4924      	ldr	r1, [pc, #144]	; (8000adc <input_reading+0xe0>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d133      	bne.n	8000abe <input_reading+0xc2>
		if(KeyReg3[i]!=KeyReg2[i]){
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <input_reading+0xe4>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5e:	491f      	ldr	r1, [pc, #124]	; (8000adc <input_reading+0xe0>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d017      	beq.n	8000a9a <input_reading+0x9e>
			KeyReg3[i]=KeyReg2[i];
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <input_reading+0xe0>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a72:	491b      	ldr	r1, [pc, #108]	; (8000ae0 <input_reading+0xe4>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(KeyReg2[i]==PRESSED_STATE){
 8000a7a:	4a18      	ldr	r2, [pc, #96]	; (8000adc <input_reading+0xe0>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d11b      	bne.n	8000abe <input_reading+0xc2>
				button_flag[i]=1;
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <input_reading+0xe8>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				//after 3 sec button change to pressed_more_than_3sec_state
				TimeForKeyPress=300;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <input_reading+0xec>)
 8000a92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e011      	b.n	8000abe <input_reading+0xc2>
				}
		}else{
			TimeForKeyPress--;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <input_reading+0xec>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <input_reading+0xec>)
 8000aa2:	6013      	str	r3, [r2, #0]
			if(TimeForKeyPress==0) {
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <input_reading+0xec>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d108      	bne.n	8000abe <input_reading+0xc2>
				//pressed_more_than_3sec_state
			    //PressedKeyProcess(index);
				if(KeyReg2[i]==PRESSED_STATE) //TODO
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <input_reading+0xe0>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <input_reading+0xc2>
				TimeForKeyPress=100;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <input_reading+0xec>)
 8000aba:	2264      	movs	r2, #100	; 0x64
 8000abc:	601a      	str	r2, [r3, #0]
for(int i=0;i<4;i++){
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	dd9e      	ble.n	8000a08 <input_reading+0xc>
				}
			}
	}//end if
}//end for

}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000018 	.word	0x20000018
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000028 	.word	0x20000028
 8000ae0:	20000038 	.word	0x20000038
 8000ae4:	20000120 	.word	0x20000120
 8000ae8:	20000048 	.word	0x20000048

08000aec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000af4:	f000 f97a 	bl	8000dec <SCH_Update>
	timer1_run();
 8000af8:	f000 f9f4 	bl	8000ee4 <timer1_run>
	timer2_run();
 8000afc:	f000 fa10 	bl	8000f20 <timer2_run>
	input_reading();
 8000b00:	f7ff ff7c 	bl	80009fc <input_reading>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fb6a 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f838 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 f8e8 	bl	8000cec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b1c:	f000 f870 	bl	8000c00 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b20:	f000 f8ba 	bl	8000c98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b24:	4810      	ldr	r0, [pc, #64]	; (8000b68 <main+0x5c>)
 8000b26:	f001 fb95 	bl	8002254 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(1000);
 8000b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2e:	f000 f9bd 	bl	8000eac <setTimer1>
  red_duration=5;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <main+0x60>)
 8000b34:	2205      	movs	r2, #5
 8000b36:	601a      	str	r2, [r3, #0]
  green_duration=3;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <main+0x64>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	601a      	str	r2, [r3, #0]
  yellow_duration=2;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <main+0x68>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	601a      	str	r2, [r3, #0]
  counter1=5;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <main+0x6c>)
 8000b46:	2205      	movs	r2, #5
 8000b48:	601a      	str	r2, [r3, #0]
  state=AUTO_RED;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <main+0x70>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
  manual_state=1;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <main+0x74>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
  pedes_state=10;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <main+0x78>)
 8000b58:	220a      	movs	r2, #10
 8000b5a:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  pedestrian_fsm();
 8000b5c:	f7ff fd92 	bl	8000684 <pedestrian_fsm>
	  fsm();
 8000b60:	f7ff faf4 	bl	800014c <fsm>
	  pedestrian_fsm();
 8000b64:	e7fa      	b.n	8000b5c <main+0x50>
 8000b66:	bf00      	nop
 8000b68:	20000130 	.word	0x20000130
 8000b6c:	20000110 	.word	0x20000110
 8000b70:	20000114 	.word	0x20000114
 8000b74:	20000118 	.word	0x20000118
 8000b78:	2000010c 	.word	0x2000010c
 8000b7c:	2000011c 	.word	0x2000011c
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000004 	.word	0x20000004

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b090      	sub	sp, #64	; 0x40
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	2228      	movs	r2, #40	; 0x28
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fbf2 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fede 	bl	8001980 <HAL_RCC_OscConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bca:	f000 f909 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bce:	230f      	movs	r3, #15
 8000bd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f94c 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bf2:	f000 f8f5 	bl	8000de0 <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3740      	adds	r7, #64	; 0x40
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c34:	2209      	movs	r2, #9
 8000c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c46:	f001 fab5 	bl	80021b4 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c50:	f000 f8c6 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c62:	f001 fc4b 	bl	80024fc <HAL_TIM_ConfigClockSource>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f000 f8b8 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_TIM2_Init+0x94>)
 8000c7e:	f001 fe13 	bl	80028a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c88:	f000 f8aa 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000130 	.word	0x20000130

08000c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MX_USART2_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	f001 fe54 	bl	800297c <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f000 f881 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000178 	.word	0x20000178
 8000ce8:	40004400 	.word	0x40004400

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a33      	ldr	r2, [pc, #204]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_GPIO_Init+0xe8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|Pedes_light2_Pin|Light1_1_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0xec>)
 8000d50:	f000 fdfd 	bl	800194e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pedes_light1_Pin|Light1_2_Pin|Light2_2_Pin|Light2_1_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d5a:	4820      	ldr	r0, [pc, #128]	; (8000ddc <MX_GPIO_Init+0xf0>)
 8000d5c:	f000 fdf7 	bl	800194e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Pedes_button_Pin Button1_Pin Button21_Pin */
  GPIO_InitStruct.Pin = Pedes_button_Pin|Button1_Pin|Button21_Pin;
 8000d60:	2313      	movs	r3, #19
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0xec>)
 8000d74:	f000 fc58 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin Pedes_light2_Pin Light1_1_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Pedes_light2_Pin|Light1_1_Pin;
 8000d78:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <MX_GPIO_Init+0xec>)
 8000d92:	f000 fc49 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button3_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button3_Pin|Button2_Pin;
 8000d96:	2303      	movs	r3, #3
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_GPIO_Init+0xf0>)
 8000daa:	f000 fc3d 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pedes_light1_Pin Light1_2_Pin Light2_2_Pin Light2_1_Pin */
  GPIO_InitStruct.Pin = Pedes_light1_Pin|Light1_2_Pin|Light2_2_Pin|Light2_1_Pin;
 8000dae:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_GPIO_Init+0xf0>)
 8000dc8:	f000 fc2e 	bl	8001628 <HAL_GPIO_Init>

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <SCH_Update>:

		current_index_task++;
	}
}

void SCH_Update(void){
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e048      	b.n	8000e8a <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0){
 8000df8:	492a      	ldr	r1, [pc, #168]	; (8000ea4 <SCH_Update+0xb8>)
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	3304      	adds	r3, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d013      	beq.n	8000e36 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 8000e0e:	4925      	ldr	r1, [pc, #148]	; (8000ea4 <SCH_Update+0xb8>)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1e59      	subs	r1, r3, #1
 8000e22:	4820      	ldr	r0, [pc, #128]	; (8000ea4 <SCH_Update+0xb8>)
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4403      	add	r3, r0
 8000e30:	3304      	adds	r3, #4
 8000e32:	6019      	str	r1, [r3, #0]
 8000e34:	e026      	b.n	8000e84 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000e36:	491b      	ldr	r1, [pc, #108]	; (8000ea4 <SCH_Update+0xb8>)
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	3308      	adds	r3, #8
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <SCH_Update+0xb8>)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4403      	add	r3, r0
 8000e56:	3304      	adds	r3, #4
 8000e58:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8000e5a:	4912      	ldr	r1, [pc, #72]	; (8000ea4 <SCH_Update+0xb8>)
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	330c      	adds	r3, #12
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2d8      	uxtb	r0, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <SCH_Update+0xb8>)
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	330c      	adds	r3, #12
 8000e80:	4602      	mov	r2, r0
 8000e82:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <SCH_Update+0xbc>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4293      	cmp	r3, r2
 8000e94:	dbb0      	blt.n	8000df8 <SCH_Update+0xc>
		}
	}
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200001bc 	.word	0x200001bc
 8000ea8:	200004dc 	.word	0x200004dc

08000eac <setTimer1>:
int timer1_counter=0;

int timer2_flag=0;
int timer2_counter=0;

void setTimer1( int duration){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TICK;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <setTimer1+0x2c>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1092      	asrs	r2, r2, #2
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a06      	ldr	r2, [pc, #24]	; (8000edc <setTimer1+0x30>)
 8000ec4:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <setTimer1+0x34>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	66666667 	.word	0x66666667
 8000edc:	200004e4 	.word	0x200004e4
 8000ee0:	200004e0 	.word	0x200004e0

08000ee4 <timer1_run>:

void timer1_run(int index){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	if(timer1_counter>0){
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <timer1_run+0x34>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd0b      	ble.n	8000f0c <timer1_run+0x28>
		timer1_counter--;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <timer1_run+0x34>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <timer1_run+0x34>)
 8000efc:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0) timer1_flag=1;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <timer1_run+0x34>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	dc02      	bgt.n	8000f0c <timer1_run+0x28>
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <timer1_run+0x38>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
	}
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200004e4 	.word	0x200004e4
 8000f1c:	200004e0 	.word	0x200004e0

08000f20 <timer2_run>:
void setTimer2( int duration){
	timer2_counter=duration/TICK;
	timer2_flag=0;
}

void timer2_run(int index){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(timer2_counter>0){
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <timer2_run+0x34>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dd0b      	ble.n	8000f48 <timer2_run+0x28>
		timer2_counter--;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <timer2_run+0x34>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <timer2_run+0x34>)
 8000f38:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0) timer2_flag=1;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <timer2_run+0x34>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dc02      	bgt.n	8000f48 <timer2_run+0x28>
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <timer2_run+0x38>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
	}
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200004ec 	.word	0x200004ec
 8000f58:	200004e8 	.word	0x200004e8

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_MspInit+0x60>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_MspInit+0x60>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd0:	d113      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_TIM_Base_MspInit+0x44>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_TIM_Base_MspInit+0x44>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_TIM_Base_MspInit+0x44>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	201c      	movs	r0, #28
 8000ff0:	f000 fa33 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff4:	201c      	movs	r0, #28
 8000ff6:	f000 fa4c 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <HAL_UART_MspInit+0x98>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d137      	bne.n	8001098 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_UART_MspInit+0x9c>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_UART_MspInit+0x9c>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	61d3      	str	r3, [r2, #28]
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_UART_MspInit+0x9c>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0x9c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x9c>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0x9c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001058:	2304      	movs	r3, #4
 800105a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <HAL_UART_MspInit+0xa0>)
 800106c:	f000 fadc 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001070:	2308      	movs	r3, #8
 8001072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_UART_MspInit+0xa0>)
 8001084:	f000 fad0 	bl	8001628 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2026      	movs	r0, #38	; 0x26
 800108e:	f000 f9e4 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001092:	2026      	movs	r0, #38	; 0x26
 8001094:	f000 f9fd 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40004400 	.word	0x40004400
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010800 	.word	0x40010800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f8bf 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM2_IRQHandler+0x10>)
 8001102:	f001 f8f3 	bl	80022ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000130 	.word	0x20000130

08001110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <USART2_IRQHandler+0x10>)
 8001116:	f001 fd11 	bl	8002b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000178 	.word	0x20000178

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f002 f8ea 	bl	800332c <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20002800 	.word	0x20002800
 8001184:	00000400 	.word	0x00000400
 8001188:	200004f0 	.word	0x200004f0
 800118c:	20000508 	.word	0x20000508

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ffe5 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f002 f8b7 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff fc9f 	bl	8000b0c <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80011d8:	08003d7c 	.word	0x08003d7c
  ldr r2, =_sbss
 80011dc:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80011e0:	20000508 	.word	0x20000508

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f923 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff feaa 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f93b 	bl	80014ae <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f903 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000004c 	.word	0x2000004c
 800126c:	20000054 	.word	0x20000054
 8001270:	20000050 	.word	0x20000050

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000054 	.word	0x20000054
 8001294:	200004f4 	.word	0x200004f4

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	200004f4 	.word	0x200004f4

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4906      	ldr	r1, [pc, #24]	; (8001344 <__NVIC_EnableIRQ+0x34>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff90 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff2d 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff42 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff90 	bl	800139c <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5f 	bl	8001348 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff35 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d008      	beq.n	80014ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2204      	movs	r2, #4
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e020      	b.n	8001530 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 020e 	bic.w	r2, r2, #14
 80014fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154e:	2b02      	cmp	r3, #2
 8001550:	d005      	beq.n	800155e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e051      	b.n	8001602 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020e 	bic.w	r2, r2, #14
 800156c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_DMA_Abort_IT+0xd0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d029      	beq.n	80015dc <HAL_DMA_Abort_IT+0xa0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_DMA_Abort_IT+0xd4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d022      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x9c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_DMA_Abort_IT+0xd8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d01a      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x96>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_DMA_Abort_IT+0xdc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d012      	beq.n	80015cc <HAL_DMA_Abort_IT+0x90>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_DMA_Abort_IT+0xe0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00a      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x8a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_DMA_Abort_IT+0xe4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d102      	bne.n	80015c0 <HAL_DMA_Abort_IT+0x84>
 80015ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015be:	e00e      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c4:	e00b      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ca:	e008      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	e005      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	e002      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015d8:	2310      	movs	r3, #16
 80015da:	e000      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015dc:	2301      	movs	r3, #1
 80015de:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_DMA_Abort_IT+0xe8>)
 80015e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
    } 
  }
  return status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020008 	.word	0x40020008
 8001610:	4002001c 	.word	0x4002001c
 8001614:	40020030 	.word	0x40020030
 8001618:	40020044 	.word	0x40020044
 800161c:	40020058 	.word	0x40020058
 8001620:	4002006c 	.word	0x4002006c
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e161      	b.n	8001900 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800163c:	2201      	movs	r2, #1
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8150 	bne.w	80018fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a97      	ldr	r2, [pc, #604]	; (80018bc <HAL_GPIO_Init+0x294>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d05e      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001664:	4a95      	ldr	r2, [pc, #596]	; (80018bc <HAL_GPIO_Init+0x294>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d875      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800166a:	4a95      	ldr	r2, [pc, #596]	; (80018c0 <HAL_GPIO_Init+0x298>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d058      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001670:	4a93      	ldr	r2, [pc, #588]	; (80018c0 <HAL_GPIO_Init+0x298>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d86f      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 8001676:	4a93      	ldr	r2, [pc, #588]	; (80018c4 <HAL_GPIO_Init+0x29c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d052      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 800167c:	4a91      	ldr	r2, [pc, #580]	; (80018c4 <HAL_GPIO_Init+0x29c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d869      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 8001682:	4a91      	ldr	r2, [pc, #580]	; (80018c8 <HAL_GPIO_Init+0x2a0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d04c      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001688:	4a8f      	ldr	r2, [pc, #572]	; (80018c8 <HAL_GPIO_Init+0x2a0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d863      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800168e:	4a8f      	ldr	r2, [pc, #572]	; (80018cc <HAL_GPIO_Init+0x2a4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d046      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001694:	4a8d      	ldr	r2, [pc, #564]	; (80018cc <HAL_GPIO_Init+0x2a4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d85d      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d82a      	bhi.n	80016f4 <HAL_GPIO_Init+0xcc>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d859      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 80016a2:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <HAL_GPIO_Init+0x80>)
 80016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a8:	08001723 	.word	0x08001723
 80016ac:	080016fd 	.word	0x080016fd
 80016b0:	0800170f 	.word	0x0800170f
 80016b4:	08001751 	.word	0x08001751
 80016b8:	08001757 	.word	0x08001757
 80016bc:	08001757 	.word	0x08001757
 80016c0:	08001757 	.word	0x08001757
 80016c4:	08001757 	.word	0x08001757
 80016c8:	08001757 	.word	0x08001757
 80016cc:	08001757 	.word	0x08001757
 80016d0:	08001757 	.word	0x08001757
 80016d4:	08001757 	.word	0x08001757
 80016d8:	08001757 	.word	0x08001757
 80016dc:	08001757 	.word	0x08001757
 80016e0:	08001757 	.word	0x08001757
 80016e4:	08001757 	.word	0x08001757
 80016e8:	08001757 	.word	0x08001757
 80016ec:	08001705 	.word	0x08001705
 80016f0:	08001719 	.word	0x08001719
 80016f4:	4a76      	ldr	r2, [pc, #472]	; (80018d0 <HAL_GPIO_Init+0x2a8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fa:	e02c      	b.n	8001756 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e029      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	3304      	adds	r3, #4
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e024      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	3308      	adds	r3, #8
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e01f      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	330c      	adds	r3, #12
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e01a      	b.n	8001758 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172a:	2304      	movs	r3, #4
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e013      	b.n	8001758 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001738:	2308      	movs	r3, #8
 800173a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	611a      	str	r2, [r3, #16]
          break;
 8001742:	e009      	b.n	8001758 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001744:	2308      	movs	r3, #8
 8001746:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	615a      	str	r2, [r3, #20]
          break;
 800174e:	e003      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e000      	b.n	8001758 <HAL_GPIO_Init+0x130>
          break;
 8001756:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2bff      	cmp	r3, #255	; 0xff
 800175c:	d801      	bhi.n	8001762 <HAL_GPIO_Init+0x13a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_Init+0x13e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	d802      	bhi.n	8001774 <HAL_GPIO_Init+0x14c>
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	e002      	b.n	800177a <HAL_GPIO_Init+0x152>
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	3b08      	subs	r3, #8
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	210f      	movs	r1, #15
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	401a      	ands	r2, r3
 800178c:	6a39      	ldr	r1, [r7, #32]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80a9 	beq.w	80018fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <HAL_GPIO_Init+0x2ac>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_GPIO_Init+0x2ac>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_GPIO_Init+0x2ac>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c0:	4a45      	ldr	r2, [pc, #276]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <HAL_GPIO_Init+0x2b4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00d      	beq.n	8001808 <HAL_GPIO_Init+0x1e0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3c      	ldr	r2, [pc, #240]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1dc>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3b      	ldr	r2, [pc, #236]	; (80018e4 <HAL_GPIO_Init+0x2bc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_GPIO_Init+0x1d8>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e004      	b.n	800180a <HAL_GPIO_Init+0x1e2>
 8001800:	2303      	movs	r3, #3
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x1e2>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_GPIO_Init+0x1e2>
 8001808:	2300      	movs	r3, #0
 800180a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180c:	f002 0203 	and.w	r2, r2, #3
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	4093      	lsls	r3, r2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800181a:	492f      	ldr	r1, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	492b      	ldr	r1, [pc, #172]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	43db      	mvns	r3, r3
 800184a:	4927      	ldr	r1, [pc, #156]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 800184c:	4013      	ands	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4921      	ldr	r1, [pc, #132]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	43db      	mvns	r3, r3
 8001872:	491d      	ldr	r1, [pc, #116]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 8001874:	4013      	ands	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	4917      	ldr	r1, [pc, #92]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4913      	ldr	r1, [pc, #76]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 800189c:	4013      	ands	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01f      	beq.n	80018ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	490d      	ldr	r1, [pc, #52]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
 80018b8:	e01f      	b.n	80018fa <HAL_GPIO_Init+0x2d2>
 80018ba:	bf00      	nop
 80018bc:	10320000 	.word	0x10320000
 80018c0:	10310000 	.word	0x10310000
 80018c4:	10220000 	.word	0x10220000
 80018c8:	10210000 	.word	0x10210000
 80018cc:	10120000 	.word	0x10120000
 80018d0:	10110000 	.word	0x10110000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	40011000 	.word	0x40011000
 80018e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_GPIO_Init+0x2f4>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <HAL_GPIO_Init+0x2f4>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	3301      	adds	r3, #1
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	f47f ae96 	bne.w	800163c <HAL_GPIO_Init+0x14>
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	372c      	adds	r7, #44	; 0x2c
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40010400 	.word	0x40010400

08001920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	807b      	strh	r3, [r7, #2]
 800195a:	4613      	mov	r3, r2
 800195c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001964:	887a      	ldrh	r2, [r7, #2]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800196a:	e003      	b.n	8001974 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	041a      	lsls	r2, r3, #16
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	611a      	str	r2, [r3, #16]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
	...

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e272      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b92      	ldr	r3, [pc, #584]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ac:	4b8f      	ldr	r3, [pc, #572]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d112      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
 80019b8:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b89      	ldr	r3, [pc, #548]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06c      	beq.n	8001aac <HAL_RCC_OscConfig+0x12c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d168      	bne.n	8001aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e24c      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x76>
 80019e8:	4b80      	ldr	r3, [pc, #512]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a7f      	ldr	r2, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e02e      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0xbc>
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a71      	ldr	r2, [pc, #452]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6e      	ldr	r2, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b68      	ldr	r3, [pc, #416]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a67      	ldr	r2, [pc, #412]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc1c 	bl	8001298 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fc18 	bl	8001298 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e200      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe4>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc08 	bl	8001298 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fc04 	bl	8001298 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1ec      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x10c>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac6:	4b49      	ldr	r3, [pc, #292]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4939      	ldr	r1, [pc, #228]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fbbd 	bl	8001298 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fbb9 	bl	8001298 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1a1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4927      	ldr	r1, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb9c 	bl	8001298 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fb98 	bl	8001298 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e180      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03a      	beq.n	8001c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fb7c 	bl	8001298 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fb78 	bl	8001298 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e160      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f000 fad8 	bl	8002178 <RCC_Delay>
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fb62 	bl	8001298 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fb5e 	bl	8001298 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d908      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e146      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	42420000 	.word	0x42420000
 8001bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e9      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a6 	beq.w	8001d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a87      	ldr	r2, [pc, #540]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb1f 	bl	8001298 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fb1b 	bl	8001298 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	; 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e103      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x312>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	e02d      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	e01c      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x356>
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a60      	ldr	r2, [pc, #384]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff facf 	bl	8001298 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff facb 	bl	8001298 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0b1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ee      	beq.n	8001cfe <HAL_RCC_OscConfig+0x37e>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fab9 	bl	8001298 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fab5 	bl	8001298 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e09b      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d061      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d146      	bne.n	8001e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fa89 	bl	8001298 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7ff fa85 	bl	8001298 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e06d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4921      	ldr	r1, [pc, #132]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a19      	ldr	r1, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	491b      	ldr	r1, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fa59 	bl	8001298 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fa55 	bl	8001298 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e03d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x46a>
 8001e08:	e035      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fa42 	bl	8001298 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff fa3e 	bl	8001298 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e026      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x498>
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e019      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x500>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f990 	bl	8001298 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f98c 	bl	8001298 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f8ee 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	08003d28 	.word	0x08003d28
 8002050:	2000004c 	.word	0x2000004c
 8002054:	20000050 	.word	0x20000050

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b490      	push	{r4, r7}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_RCC_GetSysClockFreq+0xac>)
 8002060:	1d3c      	adds	r4, r7, #4
 8002062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002068:	f240 2301 	movw	r3, #513	; 0x201
 800206c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d002      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x40>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x46>
 8002096:	e02b      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 800209a:	623b      	str	r3, [r7, #32]
      break;
 800209c:	e02b      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	0c9b      	lsrs	r3, r3, #18
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3328      	adds	r3, #40	; 0x28
 80020a8:	443b      	add	r3, r7
 80020aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d012      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	0c5b      	lsrs	r3, r3, #17
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	3328      	adds	r3, #40	; 0x28
 80020c6:	443b      	add	r3, r7
 80020c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d2:	fb03 f202 	mul.w	r2, r3, r2
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	e004      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	623b      	str	r3, [r7, #32]
      break;
 80020ee:	e002      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f2:	623b      	str	r3, [r7, #32]
      break;
 80020f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f6:	6a3b      	ldr	r3, [r7, #32]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc90      	pop	{r4, r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	08003d18 	.word	0x08003d18
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	003d0900 	.word	0x003d0900

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_RCC_GetHCLKFreq+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	2000004c 	.word	0x2000004c

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800212c:	f7ff fff2 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	08003d38 	.word	0x08003d38

08002150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002154:	f7ff ffde 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0adb      	lsrs	r3, r3, #11
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4903      	ldr	r1, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08003d38 	.word	0x08003d38

08002178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <RCC_Delay+0x34>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <RCC_Delay+0x38>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0a5b      	lsrs	r3, r3, #9
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002194:	bf00      	nop
  }
  while (Delay --);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	60fa      	str	r2, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f9      	bne.n	8002194 <RCC_Delay+0x1c>
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	2000004c 	.word	0x2000004c
 80021b0:	10624dd3 	.word	0x10624dd3

080021b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e041      	b.n	800224a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fef0 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 fa6a 	bl	80026cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d001      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e035      	b.n	80022d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_TIM_Base_Start_IT+0x90>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x4e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d004      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x4e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <HAL_TIM_Base_Start_IT+0x94>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d111      	bne.n	80022c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d010      	beq.n	80022d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c4:	e007      	b.n	80022d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40000400 	.word	0x40000400

080022ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d122      	bne.n	8002348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0202 	mvn.w	r2, #2
 8002318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9b1 	bl	8002696 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f9a4 	bl	8002684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f9b3 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d122      	bne.n	800239c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d11b      	bne.n	800239c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0204 	mvn.w	r2, #4
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f987 	bl	8002696 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f97a 	bl	8002684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f989 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d122      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d11b      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0208 	mvn.w	r2, #8
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f95d 	bl	8002696 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f950 	bl	8002684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f95f 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d122      	bne.n	8002444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b10      	cmp	r3, #16
 800240a:	d11b      	bne.n	8002444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0210 	mvn.w	r2, #16
 8002414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2208      	movs	r2, #8
 800241a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f933 	bl	8002696 <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f926 	bl	8002684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f935 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10e      	bne.n	8002470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0201 	mvn.w	r2, #1
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fb3e 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d10e      	bne.n	800249c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d107      	bne.n	800249c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa67 	bl	800296a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d10e      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d107      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8f9 	bl	80026ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0220 	mvn.w	r2, #32
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fa32 	bl	8002958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_TIM_ConfigClockSource+0x18>
 8002510:	2302      	movs	r3, #2
 8002512:	e0b3      	b.n	800267c <HAL_TIM_ConfigClockSource+0x180>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800253a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254c:	d03e      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0xd0>
 800254e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002552:	f200 8087 	bhi.w	8002664 <HAL_TIM_ConfigClockSource+0x168>
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	f000 8085 	beq.w	8002668 <HAL_TIM_ConfigClockSource+0x16c>
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d87f      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
 8002564:	2b70      	cmp	r3, #112	; 0x70
 8002566:	d01a      	beq.n	800259e <HAL_TIM_ConfigClockSource+0xa2>
 8002568:	2b70      	cmp	r3, #112	; 0x70
 800256a:	d87b      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
 800256c:	2b60      	cmp	r3, #96	; 0x60
 800256e:	d050      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x116>
 8002570:	2b60      	cmp	r3, #96	; 0x60
 8002572:	d877      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
 8002574:	2b50      	cmp	r3, #80	; 0x50
 8002576:	d03c      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0xf6>
 8002578:	2b50      	cmp	r3, #80	; 0x50
 800257a:	d873      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d058      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x136>
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d86f      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
 8002584:	2b30      	cmp	r3, #48	; 0x30
 8002586:	d064      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x156>
 8002588:	2b30      	cmp	r3, #48	; 0x30
 800258a:	d86b      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
 800258c:	2b20      	cmp	r3, #32
 800258e:	d060      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x156>
 8002590:	2b20      	cmp	r3, #32
 8002592:	d867      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05c      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x156>
 8002598:	2b10      	cmp	r3, #16
 800259a:	d05a      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800259c:	e062      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f000 f95c 	bl	800286a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	609a      	str	r2, [r3, #8]
      break;
 80025ca:	e04e      	b.n	800266a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6899      	ldr	r1, [r3, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f000 f945 	bl	800286a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ee:	609a      	str	r2, [r3, #8]
      break;
 80025f0:	e03b      	b.n	800266a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8bc 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2150      	movs	r1, #80	; 0x50
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f913 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 8002610:	e02b      	b.n	800266a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f8da 	bl	80027d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2160      	movs	r1, #96	; 0x60
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f903 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 8002630:	e01b      	b.n	800266a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	461a      	mov	r2, r3
 8002640:	f000 f89c 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f8f3 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 8002650:	e00b      	b.n	800266a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f000 f8ea 	bl	8002836 <TIM_ITRx_SetConfig>
        break;
 8002662:	e002      	b.n	800266a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002664:	bf00      	nop
 8002666:	e000      	b.n	800266a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002668:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a25      	ldr	r2, [pc, #148]	; (8002774 <TIM_Base_SetConfig+0xa8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d007      	beq.n	80026f4 <TIM_Base_SetConfig+0x28>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d003      	beq.n	80026f4 <TIM_Base_SetConfig+0x28>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a22      	ldr	r2, [pc, #136]	; (8002778 <TIM_Base_SetConfig+0xac>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d108      	bne.n	8002706 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <TIM_Base_SetConfig+0xa8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <TIM_Base_SetConfig+0x52>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d003      	beq.n	800271e <TIM_Base_SetConfig+0x52>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <TIM_Base_SetConfig+0xac>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d108      	bne.n	8002730 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a07      	ldr	r2, [pc, #28]	; (8002774 <TIM_Base_SetConfig+0xa8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d103      	bne.n	8002764 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	615a      	str	r2, [r3, #20]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400

0800277c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0201 	bic.w	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f023 030a 	bic.w	r3, r3, #10
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f023 0210 	bic.w	r2, r3, #16
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002802:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	031b      	lsls	r3, r3, #12
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	621a      	str	r2, [r3, #32]
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	f043 0307 	orr.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002884:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	021a      	lsls	r2, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	431a      	orrs	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	609a      	str	r2, [r3, #8]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028bc:	2302      	movs	r3, #2
 80028be:	e041      	b.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d004      	beq.n	8002918 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d10c      	bne.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4313      	orrs	r3, r2
 8002928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40000400 	.word	0x40000400

08002958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e03f      	b.n	8002a0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fb30 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fc25 	bl	8003210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08a      	sub	sp, #40	; 0x28
 8002a1a:	af02      	add	r7, sp, #8
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d17c      	bne.n	8002b30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_UART_Transmit+0x2c>
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e075      	b.n	8002b32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_UART_Transmit+0x3e>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e06e      	b.n	8002b32 <HAL_UART_Transmit+0x11c>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2221      	movs	r2, #33	; 0x21
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a6a:	f7fe fc15 	bl	8001298 <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a84:	d108      	bne.n	8002a98 <HAL_UART_Transmit+0x82>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	e003      	b.n	8002aa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002aa8:	e02a      	b.n	8002b00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fa11 	bl	8002edc <UART_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e036      	b.n	8002b32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	3302      	adds	r3, #2
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	e007      	b.n	8002af2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	3301      	adds	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1cf      	bne.n	8002aaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f9e1 	bl	8002edc <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e006      	b.n	8002b32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10d      	bne.n	8002b8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_UART_IRQHandler+0x52>
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa99 	bl	80030be <UART_Receive_IT>
      return;
 8002b8c:	e17b      	b.n	8002e86 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80b1 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x1bc>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_UART_IRQHandler+0x70>
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80a6 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_UART_IRQHandler+0x90>
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_UART_IRQHandler+0xb0>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0202 	orr.w	r2, r3, #2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_UART_IRQHandler+0xd0>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00f      	beq.n	8002c36 <HAL_UART_IRQHandler+0xfa>
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_UART_IRQHandler+0xee>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0208 	orr.w	r2, r3, #8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 811e 	beq.w	8002e7c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_UART_IRQHandler+0x11e>
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fa32 	bl	80030be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <HAL_UART_IRQHandler+0x146>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d031      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f974 	bl	8002f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d023      	beq.n	8002cde <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d013      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	4a76      	ldr	r2, [pc, #472]	; (8002e8c <HAL_UART_IRQHandler+0x350>)
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fc3e 	bl	800153c <HAL_DMA_Abort_IT>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	e00e      	b.n	8002cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8ec 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	e00a      	b.n	8002cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8e8 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	e006      	b.n	8002cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8e4 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cf2:	e0c3      	b.n	8002e7c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	bf00      	nop
    return;
 8002cf6:	e0c1      	b.n	8002e7c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	f040 80a1 	bne.w	8002e44 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 809b 	beq.w	8002e44 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8095 	beq.w	8002e44 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d04e      	beq.n	8002ddc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d48:	8a3b      	ldrh	r3, [r7, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8098 	beq.w	8002e80 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d54:	8a3a      	ldrh	r2, [r7, #16]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	f080 8092 	bcs.w	8002e80 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8a3a      	ldrh	r2, [r7, #16]
 8002d60:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d02b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d7a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0210 	bic.w	r2, r2, #16
 8002db8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fb81 	bl	80014c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f876 	bl	8002ec6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dda:	e051      	b.n	8002e80 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d047      	beq.n	8002e84 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002df4:	8a7b      	ldrh	r3, [r7, #18]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e08:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0210 	bic.w	r2, r2, #16
 8002e36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e38:	8a7b      	ldrh	r3, [r7, #18]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f842 	bl	8002ec6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e42:	e01f      	b.n	8002e84 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_UART_IRQHandler+0x324>
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8c9 	bl	8002ff0 <UART_Transmit_IT>
    return;
 8002e5e:	e012      	b.n	8002e86 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <HAL_UART_IRQHandler+0x34a>
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f90a 	bl	800308e <UART_EndTransmit_IT>
    return;
 8002e7a:	e004      	b.n	8002e86 <HAL_UART_IRQHandler+0x34a>
    return;
 8002e7c:	bf00      	nop
 8002e7e:	e002      	b.n	8002e86 <HAL_UART_IRQHandler+0x34a>
      return;
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <HAL_UART_IRQHandler+0x34a>
      return;
 8002e84:	bf00      	nop
  }
}
 8002e86:	3728      	adds	r7, #40	; 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	08002fc9 	.word	0x08002fc9

08002e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eec:	e02c      	b.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d028      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002efc:	f7fe f9cc 	bl	8001298 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d21d      	bcs.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e00f      	b.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4013      	ands	r3, r2
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d0c3      	beq.n	8002eee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f86:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0210 	bic.w	r2, r2, #16
 8002fae:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff ff66 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b21      	cmp	r3, #33	; 0x21
 8003002:	d13e      	bne.n	8003082 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d114      	bne.n	8003038 <UART_Transmit_IT+0x48>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d110      	bne.n	8003038 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800302a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	621a      	str	r2, [r3, #32]
 8003036:	e008      	b.n	800304a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	1c59      	adds	r1, r3, #1
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6211      	str	r1, [r2, #32]
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29b      	uxth	r3, r3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4619      	mov	r1, r3
 8003058:	84d1      	strh	r1, [r2, #38]	; 0x26
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10f      	bne.n	800307e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800306c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff feee 	bl	8002e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b22      	cmp	r3, #34	; 0x22
 80030d0:	f040 8099 	bne.w	8003206 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d117      	bne.n	800310e <UART_Receive_IT+0x50>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d113      	bne.n	800310e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	1c9a      	adds	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
 800310c:	e026      	b.n	800315c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003120:	d007      	beq.n	8003132 <UART_Receive_IT+0x74>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <UART_Receive_IT+0x82>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e008      	b.n	8003152 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314c:	b2da      	uxtb	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4619      	mov	r1, r3
 800316a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800316c:	2b00      	cmp	r3, #0
 800316e:	d148      	bne.n	8003202 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0220 	bic.w	r2, r2, #32
 800317e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800318e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d123      	bne.n	80031f8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0210 	bic.w	r2, r2, #16
 80031c4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d10a      	bne.n	80031ea <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fe68 	bl	8002ec6 <HAL_UARTEx_RxEventCallback>
 80031f6:	e002      	b.n	80031fe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fe52 	bl	8002ea2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e002      	b.n	8003208 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800324a:	f023 030c 	bic.w	r3, r3, #12
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	430b      	orrs	r3, r1
 8003256:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <UART_SetConfig+0x114>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d103      	bne.n	8003280 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003278:	f7fe ff6a 	bl	8002150 <HAL_RCC_GetPCLK2Freq>
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	e002      	b.n	8003286 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7fe ff52 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003284:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <UART_SetConfig+0x118>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	0119      	lsls	r1, r3, #4
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <UART_SetConfig+0x118>)
 80032be:	fba3 0302 	umull	r0, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2064      	movs	r0, #100	; 0x64
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	3332      	adds	r3, #50	; 0x32
 80032d0:	4a15      	ldr	r2, [pc, #84]	; (8003328 <UART_SetConfig+0x118>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032dc:	4419      	add	r1, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <UART_SetConfig+0x118>)
 80032f6:	fba3 0302 	umull	r0, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2064      	movs	r0, #100	; 0x64
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	3332      	adds	r3, #50	; 0x32
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <UART_SetConfig+0x118>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	440a      	add	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013800 	.word	0x40013800
 8003328:	51eb851f 	.word	0x51eb851f

0800332c <__errno>:
 800332c:	4b01      	ldr	r3, [pc, #4]	; (8003334 <__errno+0x8>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000058 	.word	0x20000058

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	2600      	movs	r6, #0
 800333c:	4d0c      	ldr	r5, [pc, #48]	; (8003370 <__libc_init_array+0x38>)
 800333e:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 8003340:	1b64      	subs	r4, r4, r5
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	42a6      	cmp	r6, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	f000 fc9c 	bl	8003c84 <_init>
 800334c:	2600      	movs	r6, #0
 800334e:	4d0a      	ldr	r5, [pc, #40]	; (8003378 <__libc_init_array+0x40>)
 8003350:	4c0a      	ldr	r4, [pc, #40]	; (800337c <__libc_init_array+0x44>)
 8003352:	1b64      	subs	r4, r4, r5
 8003354:	10a4      	asrs	r4, r4, #2
 8003356:	42a6      	cmp	r6, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003360:	4798      	blx	r3
 8003362:	3601      	adds	r6, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f855 3b04 	ldr.w	r3, [r5], #4
 800336a:	4798      	blx	r3
 800336c:	3601      	adds	r6, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	08003d74 	.word	0x08003d74
 8003374:	08003d74 	.word	0x08003d74
 8003378:	08003d74 	.word	0x08003d74
 800337c:	08003d78 	.word	0x08003d78

08003380 <memset>:
 8003380:	4603      	mov	r3, r0
 8003382:	4402      	add	r2, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <siprintf>:
 8003390:	b40e      	push	{r1, r2, r3}
 8003392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003396:	b500      	push	{lr}
 8003398:	b09c      	sub	sp, #112	; 0x70
 800339a:	ab1d      	add	r3, sp, #116	; 0x74
 800339c:	9002      	str	r0, [sp, #8]
 800339e:	9006      	str	r0, [sp, #24]
 80033a0:	9107      	str	r1, [sp, #28]
 80033a2:	9104      	str	r1, [sp, #16]
 80033a4:	4808      	ldr	r0, [pc, #32]	; (80033c8 <siprintf+0x38>)
 80033a6:	4909      	ldr	r1, [pc, #36]	; (80033cc <siprintf+0x3c>)
 80033a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ac:	9105      	str	r1, [sp, #20]
 80033ae:	6800      	ldr	r0, [r0, #0]
 80033b0:	a902      	add	r1, sp, #8
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	f000 f868 	bl	8003488 <_svfiprintf_r>
 80033b8:	2200      	movs	r2, #0
 80033ba:	9b02      	ldr	r3, [sp, #8]
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	b01c      	add	sp, #112	; 0x70
 80033c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033c4:	b003      	add	sp, #12
 80033c6:	4770      	bx	lr
 80033c8:	20000058 	.word	0x20000058
 80033cc:	ffff0208 	.word	0xffff0208

080033d0 <__ssputs_r>:
 80033d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d4:	688e      	ldr	r6, [r1, #8]
 80033d6:	4682      	mov	sl, r0
 80033d8:	429e      	cmp	r6, r3
 80033da:	460c      	mov	r4, r1
 80033dc:	4690      	mov	r8, r2
 80033de:	461f      	mov	r7, r3
 80033e0:	d838      	bhi.n	8003454 <__ssputs_r+0x84>
 80033e2:	898a      	ldrh	r2, [r1, #12]
 80033e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033e8:	d032      	beq.n	8003450 <__ssputs_r+0x80>
 80033ea:	6825      	ldr	r5, [r4, #0]
 80033ec:	6909      	ldr	r1, [r1, #16]
 80033ee:	3301      	adds	r3, #1
 80033f0:	eba5 0901 	sub.w	r9, r5, r1
 80033f4:	6965      	ldr	r5, [r4, #20]
 80033f6:	444b      	add	r3, r9
 80033f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003400:	106d      	asrs	r5, r5, #1
 8003402:	429d      	cmp	r5, r3
 8003404:	bf38      	it	cc
 8003406:	461d      	movcc	r5, r3
 8003408:	0553      	lsls	r3, r2, #21
 800340a:	d531      	bpl.n	8003470 <__ssputs_r+0xa0>
 800340c:	4629      	mov	r1, r5
 800340e:	f000 fb6f 	bl	8003af0 <_malloc_r>
 8003412:	4606      	mov	r6, r0
 8003414:	b950      	cbnz	r0, 800342c <__ssputs_r+0x5c>
 8003416:	230c      	movs	r3, #12
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	f8ca 3000 	str.w	r3, [sl]
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003426:	81a3      	strh	r3, [r4, #12]
 8003428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800342c:	464a      	mov	r2, r9
 800342e:	6921      	ldr	r1, [r4, #16]
 8003430:	f000 face 	bl	80039d0 <memcpy>
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800343a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343e:	81a3      	strh	r3, [r4, #12]
 8003440:	6126      	str	r6, [r4, #16]
 8003442:	444e      	add	r6, r9
 8003444:	6026      	str	r6, [r4, #0]
 8003446:	463e      	mov	r6, r7
 8003448:	6165      	str	r5, [r4, #20]
 800344a:	eba5 0509 	sub.w	r5, r5, r9
 800344e:	60a5      	str	r5, [r4, #8]
 8003450:	42be      	cmp	r6, r7
 8003452:	d900      	bls.n	8003456 <__ssputs_r+0x86>
 8003454:	463e      	mov	r6, r7
 8003456:	4632      	mov	r2, r6
 8003458:	4641      	mov	r1, r8
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	f000 fac6 	bl	80039ec <memmove>
 8003460:	68a3      	ldr	r3, [r4, #8]
 8003462:	2000      	movs	r0, #0
 8003464:	1b9b      	subs	r3, r3, r6
 8003466:	60a3      	str	r3, [r4, #8]
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	4433      	add	r3, r6
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	e7db      	b.n	8003428 <__ssputs_r+0x58>
 8003470:	462a      	mov	r2, r5
 8003472:	f000 fbb1 	bl	8003bd8 <_realloc_r>
 8003476:	4606      	mov	r6, r0
 8003478:	2800      	cmp	r0, #0
 800347a:	d1e1      	bne.n	8003440 <__ssputs_r+0x70>
 800347c:	4650      	mov	r0, sl
 800347e:	6921      	ldr	r1, [r4, #16]
 8003480:	f000 face 	bl	8003a20 <_free_r>
 8003484:	e7c7      	b.n	8003416 <__ssputs_r+0x46>
	...

08003488 <_svfiprintf_r>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	4698      	mov	r8, r3
 800348e:	898b      	ldrh	r3, [r1, #12]
 8003490:	4607      	mov	r7, r0
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	460d      	mov	r5, r1
 8003496:	4614      	mov	r4, r2
 8003498:	b09d      	sub	sp, #116	; 0x74
 800349a:	d50e      	bpl.n	80034ba <_svfiprintf_r+0x32>
 800349c:	690b      	ldr	r3, [r1, #16]
 800349e:	b963      	cbnz	r3, 80034ba <_svfiprintf_r+0x32>
 80034a0:	2140      	movs	r1, #64	; 0x40
 80034a2:	f000 fb25 	bl	8003af0 <_malloc_r>
 80034a6:	6028      	str	r0, [r5, #0]
 80034a8:	6128      	str	r0, [r5, #16]
 80034aa:	b920      	cbnz	r0, 80034b6 <_svfiprintf_r+0x2e>
 80034ac:	230c      	movs	r3, #12
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	e0d1      	b.n	800365a <_svfiprintf_r+0x1d2>
 80034b6:	2340      	movs	r3, #64	; 0x40
 80034b8:	616b      	str	r3, [r5, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9309      	str	r3, [sp, #36]	; 0x24
 80034be:	2320      	movs	r3, #32
 80034c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034c4:	2330      	movs	r3, #48	; 0x30
 80034c6:	f04f 0901 	mov.w	r9, #1
 80034ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003674 <_svfiprintf_r+0x1ec>
 80034d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034d6:	4623      	mov	r3, r4
 80034d8:	469a      	mov	sl, r3
 80034da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034de:	b10a      	cbz	r2, 80034e4 <_svfiprintf_r+0x5c>
 80034e0:	2a25      	cmp	r2, #37	; 0x25
 80034e2:	d1f9      	bne.n	80034d8 <_svfiprintf_r+0x50>
 80034e4:	ebba 0b04 	subs.w	fp, sl, r4
 80034e8:	d00b      	beq.n	8003502 <_svfiprintf_r+0x7a>
 80034ea:	465b      	mov	r3, fp
 80034ec:	4622      	mov	r2, r4
 80034ee:	4629      	mov	r1, r5
 80034f0:	4638      	mov	r0, r7
 80034f2:	f7ff ff6d 	bl	80033d0 <__ssputs_r>
 80034f6:	3001      	adds	r0, #1
 80034f8:	f000 80aa 	beq.w	8003650 <_svfiprintf_r+0x1c8>
 80034fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034fe:	445a      	add	r2, fp
 8003500:	9209      	str	r2, [sp, #36]	; 0x24
 8003502:	f89a 3000 	ldrb.w	r3, [sl]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80a2 	beq.w	8003650 <_svfiprintf_r+0x1c8>
 800350c:	2300      	movs	r3, #0
 800350e:	f04f 32ff 	mov.w	r2, #4294967295
 8003512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003516:	f10a 0a01 	add.w	sl, sl, #1
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	9307      	str	r3, [sp, #28]
 800351e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003522:	931a      	str	r3, [sp, #104]	; 0x68
 8003524:	4654      	mov	r4, sl
 8003526:	2205      	movs	r2, #5
 8003528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800352c:	4851      	ldr	r0, [pc, #324]	; (8003674 <_svfiprintf_r+0x1ec>)
 800352e:	f000 fa41 	bl	80039b4 <memchr>
 8003532:	9a04      	ldr	r2, [sp, #16]
 8003534:	b9d8      	cbnz	r0, 800356e <_svfiprintf_r+0xe6>
 8003536:	06d0      	lsls	r0, r2, #27
 8003538:	bf44      	itt	mi
 800353a:	2320      	movmi	r3, #32
 800353c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003540:	0711      	lsls	r1, r2, #28
 8003542:	bf44      	itt	mi
 8003544:	232b      	movmi	r3, #43	; 0x2b
 8003546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800354a:	f89a 3000 	ldrb.w	r3, [sl]
 800354e:	2b2a      	cmp	r3, #42	; 0x2a
 8003550:	d015      	beq.n	800357e <_svfiprintf_r+0xf6>
 8003552:	4654      	mov	r4, sl
 8003554:	2000      	movs	r0, #0
 8003556:	f04f 0c0a 	mov.w	ip, #10
 800355a:	9a07      	ldr	r2, [sp, #28]
 800355c:	4621      	mov	r1, r4
 800355e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003562:	3b30      	subs	r3, #48	; 0x30
 8003564:	2b09      	cmp	r3, #9
 8003566:	d94e      	bls.n	8003606 <_svfiprintf_r+0x17e>
 8003568:	b1b0      	cbz	r0, 8003598 <_svfiprintf_r+0x110>
 800356a:	9207      	str	r2, [sp, #28]
 800356c:	e014      	b.n	8003598 <_svfiprintf_r+0x110>
 800356e:	eba0 0308 	sub.w	r3, r0, r8
 8003572:	fa09 f303 	lsl.w	r3, r9, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	46a2      	mov	sl, r4
 800357a:	9304      	str	r3, [sp, #16]
 800357c:	e7d2      	b.n	8003524 <_svfiprintf_r+0x9c>
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	1d19      	adds	r1, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	9103      	str	r1, [sp, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	bfbb      	ittet	lt
 800358a:	425b      	neglt	r3, r3
 800358c:	f042 0202 	orrlt.w	r2, r2, #2
 8003590:	9307      	strge	r3, [sp, #28]
 8003592:	9307      	strlt	r3, [sp, #28]
 8003594:	bfb8      	it	lt
 8003596:	9204      	strlt	r2, [sp, #16]
 8003598:	7823      	ldrb	r3, [r4, #0]
 800359a:	2b2e      	cmp	r3, #46	; 0x2e
 800359c:	d10c      	bne.n	80035b8 <_svfiprintf_r+0x130>
 800359e:	7863      	ldrb	r3, [r4, #1]
 80035a0:	2b2a      	cmp	r3, #42	; 0x2a
 80035a2:	d135      	bne.n	8003610 <_svfiprintf_r+0x188>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	3402      	adds	r4, #2
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	9203      	str	r2, [sp, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bfb8      	it	lt
 80035b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80035b6:	9305      	str	r3, [sp, #20]
 80035b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003678 <_svfiprintf_r+0x1f0>
 80035bc:	2203      	movs	r2, #3
 80035be:	4650      	mov	r0, sl
 80035c0:	7821      	ldrb	r1, [r4, #0]
 80035c2:	f000 f9f7 	bl	80039b4 <memchr>
 80035c6:	b140      	cbz	r0, 80035da <_svfiprintf_r+0x152>
 80035c8:	2340      	movs	r3, #64	; 0x40
 80035ca:	eba0 000a 	sub.w	r0, r0, sl
 80035ce:	fa03 f000 	lsl.w	r0, r3, r0
 80035d2:	9b04      	ldr	r3, [sp, #16]
 80035d4:	3401      	adds	r4, #1
 80035d6:	4303      	orrs	r3, r0
 80035d8:	9304      	str	r3, [sp, #16]
 80035da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035de:	2206      	movs	r2, #6
 80035e0:	4826      	ldr	r0, [pc, #152]	; (800367c <_svfiprintf_r+0x1f4>)
 80035e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035e6:	f000 f9e5 	bl	80039b4 <memchr>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d038      	beq.n	8003660 <_svfiprintf_r+0x1d8>
 80035ee:	4b24      	ldr	r3, [pc, #144]	; (8003680 <_svfiprintf_r+0x1f8>)
 80035f0:	bb1b      	cbnz	r3, 800363a <_svfiprintf_r+0x1b2>
 80035f2:	9b03      	ldr	r3, [sp, #12]
 80035f4:	3307      	adds	r3, #7
 80035f6:	f023 0307 	bic.w	r3, r3, #7
 80035fa:	3308      	adds	r3, #8
 80035fc:	9303      	str	r3, [sp, #12]
 80035fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003600:	4433      	add	r3, r6
 8003602:	9309      	str	r3, [sp, #36]	; 0x24
 8003604:	e767      	b.n	80034d6 <_svfiprintf_r+0x4e>
 8003606:	460c      	mov	r4, r1
 8003608:	2001      	movs	r0, #1
 800360a:	fb0c 3202 	mla	r2, ip, r2, r3
 800360e:	e7a5      	b.n	800355c <_svfiprintf_r+0xd4>
 8003610:	2300      	movs	r3, #0
 8003612:	f04f 0c0a 	mov.w	ip, #10
 8003616:	4619      	mov	r1, r3
 8003618:	3401      	adds	r4, #1
 800361a:	9305      	str	r3, [sp, #20]
 800361c:	4620      	mov	r0, r4
 800361e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003622:	3a30      	subs	r2, #48	; 0x30
 8003624:	2a09      	cmp	r2, #9
 8003626:	d903      	bls.n	8003630 <_svfiprintf_r+0x1a8>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0c5      	beq.n	80035b8 <_svfiprintf_r+0x130>
 800362c:	9105      	str	r1, [sp, #20]
 800362e:	e7c3      	b.n	80035b8 <_svfiprintf_r+0x130>
 8003630:	4604      	mov	r4, r0
 8003632:	2301      	movs	r3, #1
 8003634:	fb0c 2101 	mla	r1, ip, r1, r2
 8003638:	e7f0      	b.n	800361c <_svfiprintf_r+0x194>
 800363a:	ab03      	add	r3, sp, #12
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	462a      	mov	r2, r5
 8003640:	4638      	mov	r0, r7
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <_svfiprintf_r+0x1fc>)
 8003644:	a904      	add	r1, sp, #16
 8003646:	f3af 8000 	nop.w
 800364a:	1c42      	adds	r2, r0, #1
 800364c:	4606      	mov	r6, r0
 800364e:	d1d6      	bne.n	80035fe <_svfiprintf_r+0x176>
 8003650:	89ab      	ldrh	r3, [r5, #12]
 8003652:	065b      	lsls	r3, r3, #25
 8003654:	f53f af2c 	bmi.w	80034b0 <_svfiprintf_r+0x28>
 8003658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800365a:	b01d      	add	sp, #116	; 0x74
 800365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003660:	ab03      	add	r3, sp, #12
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	462a      	mov	r2, r5
 8003666:	4638      	mov	r0, r7
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <_svfiprintf_r+0x1fc>)
 800366a:	a904      	add	r1, sp, #16
 800366c:	f000 f87c 	bl	8003768 <_printf_i>
 8003670:	e7eb      	b.n	800364a <_svfiprintf_r+0x1c2>
 8003672:	bf00      	nop
 8003674:	08003d40 	.word	0x08003d40
 8003678:	08003d46 	.word	0x08003d46
 800367c:	08003d4a 	.word	0x08003d4a
 8003680:	00000000 	.word	0x00000000
 8003684:	080033d1 	.word	0x080033d1

08003688 <_printf_common>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	4616      	mov	r6, r2
 800368e:	4699      	mov	r9, r3
 8003690:	688a      	ldr	r2, [r1, #8]
 8003692:	690b      	ldr	r3, [r1, #16]
 8003694:	4607      	mov	r7, r0
 8003696:	4293      	cmp	r3, r2
 8003698:	bfb8      	it	lt
 800369a:	4613      	movlt	r3, r2
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a2:	460c      	mov	r4, r1
 80036a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a8:	b10a      	cbz	r2, 80036ae <_printf_common+0x26>
 80036aa:	3301      	adds	r3, #1
 80036ac:	6033      	str	r3, [r6, #0]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	0699      	lsls	r1, r3, #26
 80036b2:	bf42      	ittt	mi
 80036b4:	6833      	ldrmi	r3, [r6, #0]
 80036b6:	3302      	addmi	r3, #2
 80036b8:	6033      	strmi	r3, [r6, #0]
 80036ba:	6825      	ldr	r5, [r4, #0]
 80036bc:	f015 0506 	ands.w	r5, r5, #6
 80036c0:	d106      	bne.n	80036d0 <_printf_common+0x48>
 80036c2:	f104 0a19 	add.w	sl, r4, #25
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	6832      	ldr	r2, [r6, #0]
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	dc28      	bgt.n	8003722 <_printf_common+0x9a>
 80036d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036d4:	1e13      	subs	r3, r2, #0
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	bf18      	it	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	0692      	lsls	r2, r2, #26
 80036de:	d42d      	bmi.n	800373c <_printf_common+0xb4>
 80036e0:	4649      	mov	r1, r9
 80036e2:	4638      	mov	r0, r7
 80036e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e8:	47c0      	blx	r8
 80036ea:	3001      	adds	r0, #1
 80036ec:	d020      	beq.n	8003730 <_printf_common+0xa8>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	68e5      	ldr	r5, [r4, #12]
 80036f2:	f003 0306 	and.w	r3, r3, #6
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf18      	it	ne
 80036fa:	2500      	movne	r5, #0
 80036fc:	6832      	ldr	r2, [r6, #0]
 80036fe:	f04f 0600 	mov.w	r6, #0
 8003702:	68a3      	ldr	r3, [r4, #8]
 8003704:	bf08      	it	eq
 8003706:	1aad      	subeq	r5, r5, r2
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	bf08      	it	eq
 800370c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003710:	4293      	cmp	r3, r2
 8003712:	bfc4      	itt	gt
 8003714:	1a9b      	subgt	r3, r3, r2
 8003716:	18ed      	addgt	r5, r5, r3
 8003718:	341a      	adds	r4, #26
 800371a:	42b5      	cmp	r5, r6
 800371c:	d11a      	bne.n	8003754 <_printf_common+0xcc>
 800371e:	2000      	movs	r0, #0
 8003720:	e008      	b.n	8003734 <_printf_common+0xac>
 8003722:	2301      	movs	r3, #1
 8003724:	4652      	mov	r2, sl
 8003726:	4649      	mov	r1, r9
 8003728:	4638      	mov	r0, r7
 800372a:	47c0      	blx	r8
 800372c:	3001      	adds	r0, #1
 800372e:	d103      	bne.n	8003738 <_printf_common+0xb0>
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003738:	3501      	adds	r5, #1
 800373a:	e7c4      	b.n	80036c6 <_printf_common+0x3e>
 800373c:	2030      	movs	r0, #48	; 0x30
 800373e:	18e1      	adds	r1, r4, r3
 8003740:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800374a:	4422      	add	r2, r4
 800374c:	3302      	adds	r3, #2
 800374e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003752:	e7c5      	b.n	80036e0 <_printf_common+0x58>
 8003754:	2301      	movs	r3, #1
 8003756:	4622      	mov	r2, r4
 8003758:	4649      	mov	r1, r9
 800375a:	4638      	mov	r0, r7
 800375c:	47c0      	blx	r8
 800375e:	3001      	adds	r0, #1
 8003760:	d0e6      	beq.n	8003730 <_printf_common+0xa8>
 8003762:	3601      	adds	r6, #1
 8003764:	e7d9      	b.n	800371a <_printf_common+0x92>
	...

08003768 <_printf_i>:
 8003768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800376c:	7e0f      	ldrb	r7, [r1, #24]
 800376e:	4691      	mov	r9, r2
 8003770:	2f78      	cmp	r7, #120	; 0x78
 8003772:	4680      	mov	r8, r0
 8003774:	460c      	mov	r4, r1
 8003776:	469a      	mov	sl, r3
 8003778:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800377a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800377e:	d807      	bhi.n	8003790 <_printf_i+0x28>
 8003780:	2f62      	cmp	r7, #98	; 0x62
 8003782:	d80a      	bhi.n	800379a <_printf_i+0x32>
 8003784:	2f00      	cmp	r7, #0
 8003786:	f000 80d9 	beq.w	800393c <_printf_i+0x1d4>
 800378a:	2f58      	cmp	r7, #88	; 0x58
 800378c:	f000 80a4 	beq.w	80038d8 <_printf_i+0x170>
 8003790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003798:	e03a      	b.n	8003810 <_printf_i+0xa8>
 800379a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800379e:	2b15      	cmp	r3, #21
 80037a0:	d8f6      	bhi.n	8003790 <_printf_i+0x28>
 80037a2:	a101      	add	r1, pc, #4	; (adr r1, 80037a8 <_printf_i+0x40>)
 80037a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037a8:	08003801 	.word	0x08003801
 80037ac:	08003815 	.word	0x08003815
 80037b0:	08003791 	.word	0x08003791
 80037b4:	08003791 	.word	0x08003791
 80037b8:	08003791 	.word	0x08003791
 80037bc:	08003791 	.word	0x08003791
 80037c0:	08003815 	.word	0x08003815
 80037c4:	08003791 	.word	0x08003791
 80037c8:	08003791 	.word	0x08003791
 80037cc:	08003791 	.word	0x08003791
 80037d0:	08003791 	.word	0x08003791
 80037d4:	08003923 	.word	0x08003923
 80037d8:	08003845 	.word	0x08003845
 80037dc:	08003905 	.word	0x08003905
 80037e0:	08003791 	.word	0x08003791
 80037e4:	08003791 	.word	0x08003791
 80037e8:	08003945 	.word	0x08003945
 80037ec:	08003791 	.word	0x08003791
 80037f0:	08003845 	.word	0x08003845
 80037f4:	08003791 	.word	0x08003791
 80037f8:	08003791 	.word	0x08003791
 80037fc:	0800390d 	.word	0x0800390d
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	602a      	str	r2, [r5, #0]
 8003808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800380c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003810:	2301      	movs	r3, #1
 8003812:	e0a4      	b.n	800395e <_printf_i+0x1f6>
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	6829      	ldr	r1, [r5, #0]
 8003818:	0606      	lsls	r6, r0, #24
 800381a:	f101 0304 	add.w	r3, r1, #4
 800381e:	d50a      	bpl.n	8003836 <_printf_i+0xce>
 8003820:	680e      	ldr	r6, [r1, #0]
 8003822:	602b      	str	r3, [r5, #0]
 8003824:	2e00      	cmp	r6, #0
 8003826:	da03      	bge.n	8003830 <_printf_i+0xc8>
 8003828:	232d      	movs	r3, #45	; 0x2d
 800382a:	4276      	negs	r6, r6
 800382c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003830:	230a      	movs	r3, #10
 8003832:	485e      	ldr	r0, [pc, #376]	; (80039ac <_printf_i+0x244>)
 8003834:	e019      	b.n	800386a <_printf_i+0x102>
 8003836:	680e      	ldr	r6, [r1, #0]
 8003838:	f010 0f40 	tst.w	r0, #64	; 0x40
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	bf18      	it	ne
 8003840:	b236      	sxthne	r6, r6
 8003842:	e7ef      	b.n	8003824 <_printf_i+0xbc>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	1d19      	adds	r1, r3, #4
 800384a:	6029      	str	r1, [r5, #0]
 800384c:	0601      	lsls	r1, r0, #24
 800384e:	d501      	bpl.n	8003854 <_printf_i+0xec>
 8003850:	681e      	ldr	r6, [r3, #0]
 8003852:	e002      	b.n	800385a <_printf_i+0xf2>
 8003854:	0646      	lsls	r6, r0, #25
 8003856:	d5fb      	bpl.n	8003850 <_printf_i+0xe8>
 8003858:	881e      	ldrh	r6, [r3, #0]
 800385a:	2f6f      	cmp	r7, #111	; 0x6f
 800385c:	bf0c      	ite	eq
 800385e:	2308      	moveq	r3, #8
 8003860:	230a      	movne	r3, #10
 8003862:	4852      	ldr	r0, [pc, #328]	; (80039ac <_printf_i+0x244>)
 8003864:	2100      	movs	r1, #0
 8003866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800386a:	6865      	ldr	r5, [r4, #4]
 800386c:	2d00      	cmp	r5, #0
 800386e:	bfa8      	it	ge
 8003870:	6821      	ldrge	r1, [r4, #0]
 8003872:	60a5      	str	r5, [r4, #8]
 8003874:	bfa4      	itt	ge
 8003876:	f021 0104 	bicge.w	r1, r1, #4
 800387a:	6021      	strge	r1, [r4, #0]
 800387c:	b90e      	cbnz	r6, 8003882 <_printf_i+0x11a>
 800387e:	2d00      	cmp	r5, #0
 8003880:	d04d      	beq.n	800391e <_printf_i+0x1b6>
 8003882:	4615      	mov	r5, r2
 8003884:	fbb6 f1f3 	udiv	r1, r6, r3
 8003888:	fb03 6711 	mls	r7, r3, r1, r6
 800388c:	5dc7      	ldrb	r7, [r0, r7]
 800388e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003892:	4637      	mov	r7, r6
 8003894:	42bb      	cmp	r3, r7
 8003896:	460e      	mov	r6, r1
 8003898:	d9f4      	bls.n	8003884 <_printf_i+0x11c>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d10b      	bne.n	80038b6 <_printf_i+0x14e>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07de      	lsls	r6, r3, #31
 80038a2:	d508      	bpl.n	80038b6 <_printf_i+0x14e>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	6861      	ldr	r1, [r4, #4]
 80038a8:	4299      	cmp	r1, r3
 80038aa:	bfde      	ittt	le
 80038ac:	2330      	movle	r3, #48	; 0x30
 80038ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038b6:	1b52      	subs	r2, r2, r5
 80038b8:	6122      	str	r2, [r4, #16]
 80038ba:	464b      	mov	r3, r9
 80038bc:	4621      	mov	r1, r4
 80038be:	4640      	mov	r0, r8
 80038c0:	f8cd a000 	str.w	sl, [sp]
 80038c4:	aa03      	add	r2, sp, #12
 80038c6:	f7ff fedf 	bl	8003688 <_printf_common>
 80038ca:	3001      	adds	r0, #1
 80038cc:	d14c      	bne.n	8003968 <_printf_i+0x200>
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295
 80038d2:	b004      	add	sp, #16
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	4834      	ldr	r0, [pc, #208]	; (80039ac <_printf_i+0x244>)
 80038da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038de:	6829      	ldr	r1, [r5, #0]
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80038e6:	6029      	str	r1, [r5, #0]
 80038e8:	061d      	lsls	r5, r3, #24
 80038ea:	d514      	bpl.n	8003916 <_printf_i+0x1ae>
 80038ec:	07df      	lsls	r7, r3, #31
 80038ee:	bf44      	itt	mi
 80038f0:	f043 0320 	orrmi.w	r3, r3, #32
 80038f4:	6023      	strmi	r3, [r4, #0]
 80038f6:	b91e      	cbnz	r6, 8003900 <_printf_i+0x198>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f023 0320 	bic.w	r3, r3, #32
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	2310      	movs	r3, #16
 8003902:	e7af      	b.n	8003864 <_printf_i+0xfc>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	f043 0320 	orr.w	r3, r3, #32
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	2378      	movs	r3, #120	; 0x78
 800390e:	4828      	ldr	r0, [pc, #160]	; (80039b0 <_printf_i+0x248>)
 8003910:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003914:	e7e3      	b.n	80038de <_printf_i+0x176>
 8003916:	0659      	lsls	r1, r3, #25
 8003918:	bf48      	it	mi
 800391a:	b2b6      	uxthmi	r6, r6
 800391c:	e7e6      	b.n	80038ec <_printf_i+0x184>
 800391e:	4615      	mov	r5, r2
 8003920:	e7bb      	b.n	800389a <_printf_i+0x132>
 8003922:	682b      	ldr	r3, [r5, #0]
 8003924:	6826      	ldr	r6, [r4, #0]
 8003926:	1d18      	adds	r0, r3, #4
 8003928:	6961      	ldr	r1, [r4, #20]
 800392a:	6028      	str	r0, [r5, #0]
 800392c:	0635      	lsls	r5, r6, #24
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	d501      	bpl.n	8003936 <_printf_i+0x1ce>
 8003932:	6019      	str	r1, [r3, #0]
 8003934:	e002      	b.n	800393c <_printf_i+0x1d4>
 8003936:	0670      	lsls	r0, r6, #25
 8003938:	d5fb      	bpl.n	8003932 <_printf_i+0x1ca>
 800393a:	8019      	strh	r1, [r3, #0]
 800393c:	2300      	movs	r3, #0
 800393e:	4615      	mov	r5, r2
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	e7ba      	b.n	80038ba <_printf_i+0x152>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	1d1a      	adds	r2, r3, #4
 800394a:	602a      	str	r2, [r5, #0]
 800394c:	681d      	ldr	r5, [r3, #0]
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	4628      	mov	r0, r5
 8003952:	f000 f82f 	bl	80039b4 <memchr>
 8003956:	b108      	cbz	r0, 800395c <_printf_i+0x1f4>
 8003958:	1b40      	subs	r0, r0, r5
 800395a:	6060      	str	r0, [r4, #4]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	6123      	str	r3, [r4, #16]
 8003960:	2300      	movs	r3, #0
 8003962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003966:	e7a8      	b.n	80038ba <_printf_i+0x152>
 8003968:	462a      	mov	r2, r5
 800396a:	4649      	mov	r1, r9
 800396c:	4640      	mov	r0, r8
 800396e:	6923      	ldr	r3, [r4, #16]
 8003970:	47d0      	blx	sl
 8003972:	3001      	adds	r0, #1
 8003974:	d0ab      	beq.n	80038ce <_printf_i+0x166>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	079b      	lsls	r3, r3, #30
 800397a:	d413      	bmi.n	80039a4 <_printf_i+0x23c>
 800397c:	68e0      	ldr	r0, [r4, #12]
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	4298      	cmp	r0, r3
 8003982:	bfb8      	it	lt
 8003984:	4618      	movlt	r0, r3
 8003986:	e7a4      	b.n	80038d2 <_printf_i+0x16a>
 8003988:	2301      	movs	r3, #1
 800398a:	4632      	mov	r2, r6
 800398c:	4649      	mov	r1, r9
 800398e:	4640      	mov	r0, r8
 8003990:	47d0      	blx	sl
 8003992:	3001      	adds	r0, #1
 8003994:	d09b      	beq.n	80038ce <_printf_i+0x166>
 8003996:	3501      	adds	r5, #1
 8003998:	68e3      	ldr	r3, [r4, #12]
 800399a:	9903      	ldr	r1, [sp, #12]
 800399c:	1a5b      	subs	r3, r3, r1
 800399e:	42ab      	cmp	r3, r5
 80039a0:	dcf2      	bgt.n	8003988 <_printf_i+0x220>
 80039a2:	e7eb      	b.n	800397c <_printf_i+0x214>
 80039a4:	2500      	movs	r5, #0
 80039a6:	f104 0619 	add.w	r6, r4, #25
 80039aa:	e7f5      	b.n	8003998 <_printf_i+0x230>
 80039ac:	08003d51 	.word	0x08003d51
 80039b0:	08003d62 	.word	0x08003d62

080039b4 <memchr>:
 80039b4:	4603      	mov	r3, r0
 80039b6:	b510      	push	{r4, lr}
 80039b8:	b2c9      	uxtb	r1, r1
 80039ba:	4402      	add	r2, r0
 80039bc:	4293      	cmp	r3, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	d101      	bne.n	80039c6 <memchr+0x12>
 80039c2:	2000      	movs	r0, #0
 80039c4:	e003      	b.n	80039ce <memchr+0x1a>
 80039c6:	7804      	ldrb	r4, [r0, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	428c      	cmp	r4, r1
 80039cc:	d1f6      	bne.n	80039bc <memchr+0x8>
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <memcpy>:
 80039d0:	440a      	add	r2, r1
 80039d2:	4291      	cmp	r1, r2
 80039d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039d8:	d100      	bne.n	80039dc <memcpy+0xc>
 80039da:	4770      	bx	lr
 80039dc:	b510      	push	{r4, lr}
 80039de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039e2:	4291      	cmp	r1, r2
 80039e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039e8:	d1f9      	bne.n	80039de <memcpy+0xe>
 80039ea:	bd10      	pop	{r4, pc}

080039ec <memmove>:
 80039ec:	4288      	cmp	r0, r1
 80039ee:	b510      	push	{r4, lr}
 80039f0:	eb01 0402 	add.w	r4, r1, r2
 80039f4:	d902      	bls.n	80039fc <memmove+0x10>
 80039f6:	4284      	cmp	r4, r0
 80039f8:	4623      	mov	r3, r4
 80039fa:	d807      	bhi.n	8003a0c <memmove+0x20>
 80039fc:	1e43      	subs	r3, r0, #1
 80039fe:	42a1      	cmp	r1, r4
 8003a00:	d008      	beq.n	8003a14 <memmove+0x28>
 8003a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a0a:	e7f8      	b.n	80039fe <memmove+0x12>
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	4402      	add	r2, r0
 8003a10:	428a      	cmp	r2, r1
 8003a12:	d100      	bne.n	8003a16 <memmove+0x2a>
 8003a14:	bd10      	pop	{r4, pc}
 8003a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a1e:	e7f7      	b.n	8003a10 <memmove+0x24>

08003a20 <_free_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4605      	mov	r5, r0
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d040      	beq.n	8003aaa <_free_r+0x8a>
 8003a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a2c:	1f0c      	subs	r4, r1, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bfb8      	it	lt
 8003a32:	18e4      	addlt	r4, r4, r3
 8003a34:	f000 f910 	bl	8003c58 <__malloc_lock>
 8003a38:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <_free_r+0x8c>)
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	b933      	cbnz	r3, 8003a4c <_free_r+0x2c>
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	6014      	str	r4, [r2, #0]
 8003a42:	4628      	mov	r0, r5
 8003a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a48:	f000 b90c 	b.w	8003c64 <__malloc_unlock>
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	d908      	bls.n	8003a62 <_free_r+0x42>
 8003a50:	6820      	ldr	r0, [r4, #0]
 8003a52:	1821      	adds	r1, r4, r0
 8003a54:	428b      	cmp	r3, r1
 8003a56:	bf01      	itttt	eq
 8003a58:	6819      	ldreq	r1, [r3, #0]
 8003a5a:	685b      	ldreq	r3, [r3, #4]
 8003a5c:	1809      	addeq	r1, r1, r0
 8003a5e:	6021      	streq	r1, [r4, #0]
 8003a60:	e7ed      	b.n	8003a3e <_free_r+0x1e>
 8003a62:	461a      	mov	r2, r3
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	b10b      	cbz	r3, 8003a6c <_free_r+0x4c>
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d9fa      	bls.n	8003a62 <_free_r+0x42>
 8003a6c:	6811      	ldr	r1, [r2, #0]
 8003a6e:	1850      	adds	r0, r2, r1
 8003a70:	42a0      	cmp	r0, r4
 8003a72:	d10b      	bne.n	8003a8c <_free_r+0x6c>
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	4401      	add	r1, r0
 8003a78:	1850      	adds	r0, r2, r1
 8003a7a:	4283      	cmp	r3, r0
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	d1e0      	bne.n	8003a42 <_free_r+0x22>
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4401      	add	r1, r0
 8003a86:	6011      	str	r1, [r2, #0]
 8003a88:	6053      	str	r3, [r2, #4]
 8003a8a:	e7da      	b.n	8003a42 <_free_r+0x22>
 8003a8c:	d902      	bls.n	8003a94 <_free_r+0x74>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	602b      	str	r3, [r5, #0]
 8003a92:	e7d6      	b.n	8003a42 <_free_r+0x22>
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	1821      	adds	r1, r4, r0
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	bf01      	itttt	eq
 8003a9c:	6819      	ldreq	r1, [r3, #0]
 8003a9e:	685b      	ldreq	r3, [r3, #4]
 8003aa0:	1809      	addeq	r1, r1, r0
 8003aa2:	6021      	streq	r1, [r4, #0]
 8003aa4:	6063      	str	r3, [r4, #4]
 8003aa6:	6054      	str	r4, [r2, #4]
 8003aa8:	e7cb      	b.n	8003a42 <_free_r+0x22>
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	200004f8 	.word	0x200004f8

08003ab0 <sbrk_aligned>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4e0e      	ldr	r6, [pc, #56]	; (8003aec <sbrk_aligned+0x3c>)
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	6831      	ldr	r1, [r6, #0]
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b911      	cbnz	r1, 8003ac2 <sbrk_aligned+0x12>
 8003abc:	f000 f8bc 	bl	8003c38 <_sbrk_r>
 8003ac0:	6030      	str	r0, [r6, #0]
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f000 f8b7 	bl	8003c38 <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d00a      	beq.n	8003ae4 <sbrk_aligned+0x34>
 8003ace:	1cc4      	adds	r4, r0, #3
 8003ad0:	f024 0403 	bic.w	r4, r4, #3
 8003ad4:	42a0      	cmp	r0, r4
 8003ad6:	d007      	beq.n	8003ae8 <sbrk_aligned+0x38>
 8003ad8:	1a21      	subs	r1, r4, r0
 8003ada:	4628      	mov	r0, r5
 8003adc:	f000 f8ac 	bl	8003c38 <_sbrk_r>
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d101      	bne.n	8003ae8 <sbrk_aligned+0x38>
 8003ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ae8:	4620      	mov	r0, r4
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	200004fc 	.word	0x200004fc

08003af0 <_malloc_r>:
 8003af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af4:	1ccd      	adds	r5, r1, #3
 8003af6:	f025 0503 	bic.w	r5, r5, #3
 8003afa:	3508      	adds	r5, #8
 8003afc:	2d0c      	cmp	r5, #12
 8003afe:	bf38      	it	cc
 8003b00:	250c      	movcc	r5, #12
 8003b02:	2d00      	cmp	r5, #0
 8003b04:	4607      	mov	r7, r0
 8003b06:	db01      	blt.n	8003b0c <_malloc_r+0x1c>
 8003b08:	42a9      	cmp	r1, r5
 8003b0a:	d905      	bls.n	8003b18 <_malloc_r+0x28>
 8003b0c:	230c      	movs	r3, #12
 8003b0e:	2600      	movs	r6, #0
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4630      	mov	r0, r6
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b18:	4e2e      	ldr	r6, [pc, #184]	; (8003bd4 <_malloc_r+0xe4>)
 8003b1a:	f000 f89d 	bl	8003c58 <__malloc_lock>
 8003b1e:	6833      	ldr	r3, [r6, #0]
 8003b20:	461c      	mov	r4, r3
 8003b22:	bb34      	cbnz	r4, 8003b72 <_malloc_r+0x82>
 8003b24:	4629      	mov	r1, r5
 8003b26:	4638      	mov	r0, r7
 8003b28:	f7ff ffc2 	bl	8003ab0 <sbrk_aligned>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	4604      	mov	r4, r0
 8003b30:	d14d      	bne.n	8003bce <_malloc_r+0xde>
 8003b32:	6834      	ldr	r4, [r6, #0]
 8003b34:	4626      	mov	r6, r4
 8003b36:	2e00      	cmp	r6, #0
 8003b38:	d140      	bne.n	8003bbc <_malloc_r+0xcc>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	4631      	mov	r1, r6
 8003b3e:	4638      	mov	r0, r7
 8003b40:	eb04 0803 	add.w	r8, r4, r3
 8003b44:	f000 f878 	bl	8003c38 <_sbrk_r>
 8003b48:	4580      	cmp	r8, r0
 8003b4a:	d13a      	bne.n	8003bc2 <_malloc_r+0xd2>
 8003b4c:	6821      	ldr	r1, [r4, #0]
 8003b4e:	3503      	adds	r5, #3
 8003b50:	1a6d      	subs	r5, r5, r1
 8003b52:	f025 0503 	bic.w	r5, r5, #3
 8003b56:	3508      	adds	r5, #8
 8003b58:	2d0c      	cmp	r5, #12
 8003b5a:	bf38      	it	cc
 8003b5c:	250c      	movcc	r5, #12
 8003b5e:	4638      	mov	r0, r7
 8003b60:	4629      	mov	r1, r5
 8003b62:	f7ff ffa5 	bl	8003ab0 <sbrk_aligned>
 8003b66:	3001      	adds	r0, #1
 8003b68:	d02b      	beq.n	8003bc2 <_malloc_r+0xd2>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	442b      	add	r3, r5
 8003b6e:	6023      	str	r3, [r4, #0]
 8003b70:	e00e      	b.n	8003b90 <_malloc_r+0xa0>
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	1b52      	subs	r2, r2, r5
 8003b76:	d41e      	bmi.n	8003bb6 <_malloc_r+0xc6>
 8003b78:	2a0b      	cmp	r2, #11
 8003b7a:	d916      	bls.n	8003baa <_malloc_r+0xba>
 8003b7c:	1961      	adds	r1, r4, r5
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	6025      	str	r5, [r4, #0]
 8003b82:	bf18      	it	ne
 8003b84:	6059      	strne	r1, [r3, #4]
 8003b86:	6863      	ldr	r3, [r4, #4]
 8003b88:	bf08      	it	eq
 8003b8a:	6031      	streq	r1, [r6, #0]
 8003b8c:	5162      	str	r2, [r4, r5]
 8003b8e:	604b      	str	r3, [r1, #4]
 8003b90:	4638      	mov	r0, r7
 8003b92:	f104 060b 	add.w	r6, r4, #11
 8003b96:	f000 f865 	bl	8003c64 <__malloc_unlock>
 8003b9a:	f026 0607 	bic.w	r6, r6, #7
 8003b9e:	1d23      	adds	r3, r4, #4
 8003ba0:	1af2      	subs	r2, r6, r3
 8003ba2:	d0b6      	beq.n	8003b12 <_malloc_r+0x22>
 8003ba4:	1b9b      	subs	r3, r3, r6
 8003ba6:	50a3      	str	r3, [r4, r2]
 8003ba8:	e7b3      	b.n	8003b12 <_malloc_r+0x22>
 8003baa:	6862      	ldr	r2, [r4, #4]
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	bf0c      	ite	eq
 8003bb0:	6032      	streq	r2, [r6, #0]
 8003bb2:	605a      	strne	r2, [r3, #4]
 8003bb4:	e7ec      	b.n	8003b90 <_malloc_r+0xa0>
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	6864      	ldr	r4, [r4, #4]
 8003bba:	e7b2      	b.n	8003b22 <_malloc_r+0x32>
 8003bbc:	4634      	mov	r4, r6
 8003bbe:	6876      	ldr	r6, [r6, #4]
 8003bc0:	e7b9      	b.n	8003b36 <_malloc_r+0x46>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	f000 f84c 	bl	8003c64 <__malloc_unlock>
 8003bcc:	e7a1      	b.n	8003b12 <_malloc_r+0x22>
 8003bce:	6025      	str	r5, [r4, #0]
 8003bd0:	e7de      	b.n	8003b90 <_malloc_r+0xa0>
 8003bd2:	bf00      	nop
 8003bd4:	200004f8 	.word	0x200004f8

08003bd8 <_realloc_r>:
 8003bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bdc:	4680      	mov	r8, r0
 8003bde:	4614      	mov	r4, r2
 8003be0:	460e      	mov	r6, r1
 8003be2:	b921      	cbnz	r1, 8003bee <_realloc_r+0x16>
 8003be4:	4611      	mov	r1, r2
 8003be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bea:	f7ff bf81 	b.w	8003af0 <_malloc_r>
 8003bee:	b92a      	cbnz	r2, 8003bfc <_realloc_r+0x24>
 8003bf0:	f7ff ff16 	bl	8003a20 <_free_r>
 8003bf4:	4625      	mov	r5, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bfc:	f000 f838 	bl	8003c70 <_malloc_usable_size_r>
 8003c00:	4284      	cmp	r4, r0
 8003c02:	4607      	mov	r7, r0
 8003c04:	d802      	bhi.n	8003c0c <_realloc_r+0x34>
 8003c06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c0a:	d812      	bhi.n	8003c32 <_realloc_r+0x5a>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f7ff ff6e 	bl	8003af0 <_malloc_r>
 8003c14:	4605      	mov	r5, r0
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d0ed      	beq.n	8003bf6 <_realloc_r+0x1e>
 8003c1a:	42bc      	cmp	r4, r7
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	4631      	mov	r1, r6
 8003c20:	bf28      	it	cs
 8003c22:	463a      	movcs	r2, r7
 8003c24:	f7ff fed4 	bl	80039d0 <memcpy>
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f7ff fef8 	bl	8003a20 <_free_r>
 8003c30:	e7e1      	b.n	8003bf6 <_realloc_r+0x1e>
 8003c32:	4635      	mov	r5, r6
 8003c34:	e7df      	b.n	8003bf6 <_realloc_r+0x1e>
	...

08003c38 <_sbrk_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	4d05      	ldr	r5, [pc, #20]	; (8003c54 <_sbrk_r+0x1c>)
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	f7fd fa6e 	bl	8001124 <_sbrk>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_sbrk_r+0x1a>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_sbrk_r+0x1a>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	20000500 	.word	0x20000500

08003c58 <__malloc_lock>:
 8003c58:	4801      	ldr	r0, [pc, #4]	; (8003c60 <__malloc_lock+0x8>)
 8003c5a:	f000 b811 	b.w	8003c80 <__retarget_lock_acquire_recursive>
 8003c5e:	bf00      	nop
 8003c60:	20000504 	.word	0x20000504

08003c64 <__malloc_unlock>:
 8003c64:	4801      	ldr	r0, [pc, #4]	; (8003c6c <__malloc_unlock+0x8>)
 8003c66:	f000 b80c 	b.w	8003c82 <__retarget_lock_release_recursive>
 8003c6a:	bf00      	nop
 8003c6c:	20000504 	.word	0x20000504

08003c70 <_malloc_usable_size_r>:
 8003c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c74:	1f18      	subs	r0, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bfbc      	itt	lt
 8003c7a:	580b      	ldrlt	r3, [r1, r0]
 8003c7c:	18c0      	addlt	r0, r0, r3
 8003c7e:	4770      	bx	lr

08003c80 <__retarget_lock_acquire_recursive>:
 8003c80:	4770      	bx	lr

08003c82 <__retarget_lock_release_recursive>:
 8003c82:	4770      	bx	lr

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
